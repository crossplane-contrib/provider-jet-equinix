/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsObservation struct {
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	OperationID *string `json:"operationId,omitempty" tf:"operation_id,omitempty"`

	RequiredData []RequiredDataObservation `json:"requiredData,omitempty" tf:"required_data,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ActionsParameters struct {
}

type ActionsRequiredDataObservation struct {
	Editable *bool `json:"editable,omitempty" tf:"editable,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	ValidationPattern *string `json:"validationPattern,omitempty" tf:"validation_pattern,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ActionsRequiredDataParameters struct {
}

type AdditionalInfoObservation struct {
}

type AdditionalInfoParameters struct {

	// Additional information key
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Additional information value
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type L2ConnectionObservation struct {

	// One or more pending actions to complete connection provisioning
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Connection provisioning status on service provider's side
	ProviderStatus *string `json:"providerStatus,omitempty" tf:"provider_status,omitempty"`

	// Unique identifier of group containing a primary and secondary connection
	RedundancyGroup *string `json:"redundancyGroup,omitempty" tf:"redundancy_group,omitempty"`

	// Connection redundancy type, applicable for HA connections. Either primary or secondary
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// Unique identifier of the redundant connection, applicable for HA connections
	RedundantUUID *string `json:"redundantUuid,omitempty" tf:"redundant_uuid,omitempty"`

	// Definition of secondary connection for redundant, HA connectivity
	// +kubebuilder:validation:Optional
	SecondaryConnection []SecondaryConnectionObservation `json:"secondaryConnection,omitempty" tf:"secondary_connection,omitempty"`

	// Connection provisioning status on Equinix Fabric side
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Unique identifier of the connection
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// The Equinix Fabric Token the connection was created with. Applicable if the connection was created with a ServiceToken (a-side) or ZSideServiceToken (z-side)
	VendorToken *string `json:"vendorToken,omitempty" tf:"vendor_token,omitempty"`
}

type L2ConnectionParameters struct {

	// One or more additional information key-value objects
	// +kubebuilder:validation:Optional
	AdditionalInfo []AdditionalInfoParameters `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// Text field used to authorize connection on the provider side. Value depends on a provider service profile used for connection
	// +kubebuilder:validation:Optional
	AuthorizationKey *string `json:"authorizationKey,omitempty" tf:"authorization_key,omitempty"`

	// Identifier of network interface on a given device, used for a connection. If not specified then first available interface will be selected
	// +kubebuilder:validation:Optional
	DeviceInterfaceID *float64 `json:"deviceInterfaceId,omitempty" tf:"device_interface_id,omitempty"`

	// Unique identifier of the Network Edge virtual device from which the connection would originate
	// +kubebuilder:validation:Optional
	DeviceUUID *string `json:"deviceUuid,omitempty" tf:"device_uuid,omitempty"`

	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The type of peering to set up in case when connecting to Azure Express Route. One of PRIVATE, MICROSOFT, MANUAL, PUBLIC (MANUAL and PUBLIC are deprecated and not available for new connections)
	// +kubebuilder:validation:Optional
	NamedTag *string `json:"namedTag,omitempty" tf:"named_tag,omitempty"`

	// A list of email addresses used for sending connection update notifications
	// +kubebuilder:validation:Required
	Notifications []*string `json:"notifications" tf:"notifications,omitempty"`

	// Unique identifier of the buyer's port from which the connection would originate
	// +kubebuilder:validation:Optional
	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	// Unique identifier of the service provider's service profile
	// +crossplane:generate:reference:type=L2Serviceprofile
	// +kubebuilder:validation:Optional
	ProfileUUID *string `json:"profileUuid,omitempty" tf:"profile_uuid,omitempty"`

	// Reference to a L2Serviceprofile to populate profileUuid.
	// +kubebuilder:validation:Optional
	ProfileUUIDRef *v1.Reference `json:"profileUuidRef,omitempty" tf:"-"`

	// Selector for a L2Serviceprofile to populate profileUuid.
	// +kubebuilder:validation:Optional
	ProfileUUIDSelector *v1.Selector `json:"profileUuidSelector,omitempty" tf:"-"`

	// Connection's purchase order number to reflect on the invoice
	// +kubebuilder:validation:Optional
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty" tf:"purchase_order_number,omitempty"`

	// Definition of secondary connection for redundant, HA connectivity
	// +kubebuilder:validation:Optional
	SecondaryConnection []SecondaryConnectionParameters `json:"secondaryConnection,omitempty" tf:"secondary_connection,omitempty"`

	// The metro code that denotes the connection's remote side (z-side)
	// +kubebuilder:validation:Optional
	SellerMetroCode *string `json:"sellerMetroCode,omitempty" tf:"seller_metro_code,omitempty"`

	// The region in which the seller port resides
	// +kubebuilder:validation:Optional
	SellerRegion *string `json:"sellerRegion,omitempty" tf:"seller_region,omitempty"`

	// Unique Equinix Fabric key given by a provider that grants you authorization to enable connectivity from a shared multi-tenant port (a-side)
	// +kubebuilder:validation:Optional
	ServiceToken *string `json:"serviceToken,omitempty" tf:"service_token,omitempty"`

	// Speed/Bandwidth to be allocated to the connection
	// +kubebuilder:validation:Required
	Speed *float64 `json:"speed" tf:"speed,omitempty"`

	// Unit of the speed/bandwidth to be allocated to the connection
	// +kubebuilder:validation:Required
	SpeedUnit *string `json:"speedUnit" tf:"speed_unit,omitempty"`

	// C-Tag/Inner-Tag of the connection, a numeric character ranging from 2 - 4094
	// +kubebuilder:validation:Optional
	VlanCtag *float64 `json:"vlanCtag,omitempty" tf:"vlan_ctag,omitempty"`

	// S-Tag/Outer-Tag of the connection, a numeric character ranging from 2 - 4094
	// +kubebuilder:validation:Optional
	VlanStag *float64 `json:"vlanStag,omitempty" tf:"vlan_stag,omitempty"`

	// Unique identifier of the port on the remote side (z-side)
	// +kubebuilder:validation:Optional
	ZsidePortUUID *string `json:"zsidePortUuid,omitempty" tf:"zside_port_uuid,omitempty"`

	// Unique Equinix Fabric key given by a provider that grants you authorization to enable connectivity to a shared multi-tenant port (z-side)
	// +kubebuilder:validation:Optional
	ZsideServiceToken *string `json:"zsideServiceToken,omitempty" tf:"zside_service_token,omitempty"`

	// C-Tag/Inner-Tag of the connection on the remote side (z-side)
	// +kubebuilder:validation:Optional
	ZsideVlanCtag *float64 `json:"zsideVlanCtag,omitempty" tf:"zside_vlan_ctag,omitempty"`

	// S-Tag/Outer-Tag of the connection on the remote side (z-side)
	// +kubebuilder:validation:Optional
	ZsideVlanStag *float64 `json:"zsideVlanStag,omitempty" tf:"zside_vlan_stag,omitempty"`
}

type RequiredDataObservation struct {
	Editable *bool `json:"editable,omitempty" tf:"editable,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	ValidationPattern *string `json:"validationPattern,omitempty" tf:"validation_pattern,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RequiredDataParameters struct {
}

type SecondaryConnectionActionsObservation struct {
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	OperationID *string `json:"operationId,omitempty" tf:"operation_id,omitempty"`

	RequiredData []ActionsRequiredDataObservation `json:"requiredData,omitempty" tf:"required_data,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecondaryConnectionActionsParameters struct {
}

type SecondaryConnectionObservation struct {

	// One or more pending actions to complete connection provisioning
	Actions []SecondaryConnectionActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// Connection provisioning status on service provider's side
	ProviderStatus *string `json:"providerStatus,omitempty" tf:"provider_status,omitempty"`

	// Unique identifier of group containing a primary and secondary connection
	RedundancyGroup *string `json:"redundancyGroup,omitempty" tf:"redundancy_group,omitempty"`

	// Connection redundancy type, applicable for HA connections. Either primary or secondary
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// Unique identifier of the redundant connection, applicable for HA connections
	RedundantUUID *string `json:"redundantUuid,omitempty" tf:"redundant_uuid,omitempty"`

	// Connection provisioning status on Equinix Fabric side
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Unique identifier of the connection
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// The Equinix Fabric Token the connection was created with. Applicable if the connection was created with a ServiceToken (a-side) or ZSideServiceToken (z-side)
	VendorToken *string `json:"vendorToken,omitempty" tf:"vendor_token,omitempty"`

	// Unique identifier of the port on the remote side (z-side)
	ZsidePortUUID *string `json:"zsidePortUuid,omitempty" tf:"zside_port_uuid,omitempty"`

	// C-Tag/Inner-Tag of the connection on the remote side (z-side)
	ZsideVlanCtag *float64 `json:"zsideVlanCtag,omitempty" tf:"zside_vlan_ctag,omitempty"`

	// S-Tag/Outer-Tag of the connection on the remote side (z-side)
	ZsideVlanStag *float64 `json:"zsideVlanStag,omitempty" tf:"zside_vlan_stag,omitempty"`
}

type SecondaryConnectionParameters struct {

	// Text field used to authorize connection on the provider side. Value depends on a provider service profile used for connection
	// +kubebuilder:validation:Optional
	AuthorizationKey *string `json:"authorizationKey,omitempty" tf:"authorization_key,omitempty"`

	// Identifier of network interface on a given device, used for a connection. If not specified then first available interface will be selected
	// +kubebuilder:validation:Optional
	DeviceInterfaceID *float64 `json:"deviceInterfaceId,omitempty" tf:"device_interface_id,omitempty"`

	// Unique identifier of the Network Edge virtual device from which the connection would originate
	// +kubebuilder:validation:Optional
	DeviceUUID *string `json:"deviceUuid,omitempty" tf:"device_uuid,omitempty"`

	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Unique identifier of the buyer's port from which the connection would originate
	// +kubebuilder:validation:Optional
	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	// Unique identifier of the service provider's service profile
	// +kubebuilder:validation:Optional
	ProfileUUID *string `json:"profileUuid,omitempty" tf:"profile_uuid,omitempty"`

	// The metro code that denotes the connection's remote side (z-side)
	// +kubebuilder:validation:Optional
	SellerMetroCode *string `json:"sellerMetroCode,omitempty" tf:"seller_metro_code,omitempty"`

	// The region in which the seller port resides
	// +kubebuilder:validation:Optional
	SellerRegion *string `json:"sellerRegion,omitempty" tf:"seller_region,omitempty"`

	// Unique Equinix Fabric key given by a provider that grants you authorization to enable connectivity from a shared multi-tenant port (a-side)
	// +kubebuilder:validation:Optional
	ServiceToken *string `json:"serviceToken,omitempty" tf:"service_token,omitempty"`

	// Speed/Bandwidth to be allocated to the connection
	// +kubebuilder:validation:Optional
	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`

	// Unit of the speed/bandwidth to be allocated to the connection
	// +kubebuilder:validation:Optional
	SpeedUnit *string `json:"speedUnit,omitempty" tf:"speed_unit,omitempty"`

	// C-Tag/Inner-Tag of the connection, a numeric character ranging from 2 - 4094
	// +kubebuilder:validation:Optional
	VlanCtag *float64 `json:"vlanCtag,omitempty" tf:"vlan_ctag,omitempty"`

	// S-Tag/Outer-Tag of the connection, a numeric character ranging from 2 - 4094
	// +kubebuilder:validation:Optional
	VlanStag *float64 `json:"vlanStag,omitempty" tf:"vlan_stag,omitempty"`
}

// L2ConnectionSpec defines the desired state of L2Connection
type L2ConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L2ConnectionParameters `json:"forProvider"`
}

// L2ConnectionStatus defines the observed state of L2Connection.
type L2ConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L2ConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L2Connection is the Schema for the L2Connections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type L2Connection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L2ConnectionSpec   `json:"spec"`
	Status            L2ConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L2ConnectionList contains a list of L2Connections
type L2ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L2Connection `json:"items"`
}

// Repository type metadata.
var (
	L2Connection_Kind             = "L2Connection"
	L2Connection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L2Connection_Kind}.String()
	L2Connection_KindAPIVersion   = L2Connection_Kind + "." + CRDGroupVersion.String()
	L2Connection_GroupVersionKind = CRDGroupVersion.WithKind(L2Connection_Kind)
)

func init() {
	SchemeBuilder.Register(&L2Connection{}, &L2ConnectionList{})
}
