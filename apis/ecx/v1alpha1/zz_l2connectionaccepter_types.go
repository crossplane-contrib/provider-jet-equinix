/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L2ConnectionAccepterObservation struct {
	AwsConnectionID *string `json:"awsConnectionId,omitempty" tf:"aws_connection_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type L2ConnectionAccepterParameters struct {

	// Access Key used to accept connection on provider side
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// AWS Profile Name for retrieving credentials from shared credentials file
	// +kubebuilder:validation:Optional
	AwsProfile *string `json:"awsProfile,omitempty" tf:"aws_profile,omitempty"`

	// Identifier of layer 2 connection that will be accepted
	// +kubebuilder:validation:Required
	ConnectionID *string `json:"connectionId" tf:"connection_id,omitempty"`

	// Secret Key used to accept connection on provider side
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`
}

// L2ConnectionAccepterSpec defines the desired state of L2ConnectionAccepter
type L2ConnectionAccepterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L2ConnectionAccepterParameters `json:"forProvider"`
}

// L2ConnectionAccepterStatus defines the observed state of L2ConnectionAccepter.
type L2ConnectionAccepterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L2ConnectionAccepterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L2ConnectionAccepter is the Schema for the L2ConnectionAccepters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixjet}
type L2ConnectionAccepter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              L2ConnectionAccepterSpec   `json:"spec"`
	Status            L2ConnectionAccepterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L2ConnectionAccepterList contains a list of L2ConnectionAccepters
type L2ConnectionAccepterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L2ConnectionAccepter `json:"items"`
}

// Repository type metadata.
var (
	L2ConnectionAccepter_Kind             = "L2ConnectionAccepter"
	L2ConnectionAccepter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L2ConnectionAccepter_Kind}.String()
	L2ConnectionAccepter_KindAPIVersion   = L2ConnectionAccepter_Kind + "." + CRDGroupVersion.String()
	L2ConnectionAccepter_GroupVersionKind = CRDGroupVersion.WithKind(L2ConnectionAccepter_Kind)
)

func init() {
	SchemeBuilder.Register(&L2ConnectionAccepter{}, &L2ConnectionAccepterList{})
}
