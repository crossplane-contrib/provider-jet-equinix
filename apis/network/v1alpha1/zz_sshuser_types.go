/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SSHUserObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// SSH user unique identifier
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SSHUserParameters struct {

	// list of device identifiers to which user will have access
	// +kubebuilder:validation:Required
	DeviceIds []*string `json:"deviceIds" tf:"device_ids,omitempty"`

	// SSH user password
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// SSH user login name
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// SSHUserSpec defines the desired state of SSHUser
type SSHUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SSHUserParameters `json:"forProvider"`
}

// SSHUserStatus defines the observed state of SSHUser.
type SSHUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SSHUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SSHUser is the Schema for the SSHUsers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type SSHUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SSHUserSpec   `json:"spec"`
	Status            SSHUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SSHUserList contains a list of SSHUsers
type SSHUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SSHUser `json:"items"`
}

// Repository type metadata.
var (
	SSHUser_Kind             = "SSHUser"
	SSHUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SSHUser_Kind}.String()
	SSHUser_KindAPIVersion   = SSHUser_Kind + "." + CRDGroupVersion.String()
	SSHUser_GroupVersionKind = CRDGroupVersion.WithKind(SSHUser_Kind)
)

func init() {
	SchemeBuilder.Register(&SSHUser{}, &SSHUserList{})
}
