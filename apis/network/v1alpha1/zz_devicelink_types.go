// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceLinkDeviceInitParameters struct {

	// Device ASN number. Not required for self configured devices.
	// Device ASN number
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Device identifier.
	// Device identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Device network interface identifier to use for device link
	// connection.
	// Device network interface identifier to use for device link connection
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`
}

type DeviceLinkDeviceObservation struct {

	// Device ASN number. Not required for self configured devices.
	// Device ASN number
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Device identifier.
	// Device identifier
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address from device link subnet that was assigned to the device
	// Assigned IP address from device link subnet
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Device network interface identifier to use for device link
	// connection.
	// Device network interface identifier to use for device link connection
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// device link provisioning status on a given device. One of PROVISIONING,
	// PROVISIONED, DEPROVISIONING, DEPROVISIONED, FAILED.
	// Device link connection provisioning status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DeviceLinkDeviceParameters struct {

	// Device ASN number. Not required for self configured devices.
	// Device ASN number
	// +kubebuilder:validation:Optional
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Device identifier.
	// Device identifier
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Device network interface identifier to use for device link
	// connection.
	// Device network interface identifier to use for device link connection
	// +kubebuilder:validation:Optional
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`
}

type DeviceLinkInitParameters struct {

	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Device []DeviceLinkDeviceInitParameters `json:"device,omitempty" tf:"device,omitempty"`

	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	// link
	Link []LinkInitParameters `json:"link,omitempty" tf:"link,omitempty"`

	// device link name.
	// name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	// subnet
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type DeviceLinkObservation struct {

	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	Device []DeviceLinkDeviceObservation `json:"device,omitempty" tf:"device,omitempty"`

	// Device identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	// link
	Link []LinkObservation `json:"link,omitempty" tf:"link,omitempty"`

	// device link name.
	// name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Device link provisioning status. One of PROVISIONING, PROVISIONED,
	// DEPROVISIONING, DEPROVISIONED, FAILED.
	// Device link provisioning status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	// subnet
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Device link unique identifier.
	// Device link unique identifier
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type DeviceLinkParameters struct {

	// definition of one or more devices belonging to the
	// device link. See Device section below for more details.
	// +kubebuilder:validation:Optional
	Device []DeviceLinkDeviceParameters `json:"device,omitempty" tf:"device,omitempty"`

	// definition of one or more, inter metro, connections belonging
	// to the device link. See Link section below for more details.
	// link
	// +kubebuilder:validation:Optional
	Link []LinkParameters `json:"link,omitempty" tf:"link,omitempty"`

	// device link name.
	// name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// device link subnet in CIDR format. Not required for link
	// between self configured devices.
	// subnet
	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`
}

type LinkInitParameters struct {

	// billing account number to be used for
	// connection charges
	// Billing account number to be used for connection charges
	AccountNumber *string `json:"accountNumber,omitempty" tf:"account_number,omitempty"`

	// connection destination metro code.
	// Connection destination metro code
	DstMetroCode *string `json:"dstMetroCode,omitempty" tf:"dst_metro_code,omitempty"`

	// (Deprecated) connection destination zone code is not required.
	// Connection destination zone code
	DstZoneCode *string `json:"dstZoneCode,omitempty" tf:"dst_zone_code,omitempty"`

	// connection source metro code.
	// Connection source metro code
	SrcMetroCode *string `json:"srcMetroCode,omitempty" tf:"src_metro_code,omitempty"`

	// (Deprecated) connection source zone code is not required.
	// Connection source zone code
	SrcZoneCode *string `json:"srcZoneCode,omitempty" tf:"src_zone_code,omitempty"`

	// connection throughput.
	// Connection throughput
	Throughput *string `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// connection throughput unit (Mbps or Gbps).
	// Connection throughput unit
	ThroughputUnit *string `json:"throughputUnit,omitempty" tf:"throughput_unit,omitempty"`
}

type LinkObservation struct {

	// billing account number to be used for
	// connection charges
	// Billing account number to be used for connection charges
	AccountNumber *string `json:"accountNumber,omitempty" tf:"account_number,omitempty"`

	// connection destination metro code.
	// Connection destination metro code
	DstMetroCode *string `json:"dstMetroCode,omitempty" tf:"dst_metro_code,omitempty"`

	// (Deprecated) connection destination zone code is not required.
	// Connection destination zone code
	DstZoneCode *string `json:"dstZoneCode,omitempty" tf:"dst_zone_code,omitempty"`

	// connection source metro code.
	// Connection source metro code
	SrcMetroCode *string `json:"srcMetroCode,omitempty" tf:"src_metro_code,omitempty"`

	// (Deprecated) connection source zone code is not required.
	// Connection source zone code
	SrcZoneCode *string `json:"srcZoneCode,omitempty" tf:"src_zone_code,omitempty"`

	// connection throughput.
	// Connection throughput
	Throughput *string `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// connection throughput unit (Mbps or Gbps).
	// Connection throughput unit
	ThroughputUnit *string `json:"throughputUnit,omitempty" tf:"throughput_unit,omitempty"`
}

type LinkParameters struct {

	// billing account number to be used for
	// connection charges
	// Billing account number to be used for connection charges
	// +kubebuilder:validation:Optional
	AccountNumber *string `json:"accountNumber" tf:"account_number,omitempty"`

	// connection destination metro code.
	// Connection destination metro code
	// +kubebuilder:validation:Optional
	DstMetroCode *string `json:"dstMetroCode" tf:"dst_metro_code,omitempty"`

	// (Deprecated) connection destination zone code is not required.
	// Connection destination zone code
	// +kubebuilder:validation:Optional
	DstZoneCode *string `json:"dstZoneCode,omitempty" tf:"dst_zone_code,omitempty"`

	// connection source metro code.
	// Connection source metro code
	// +kubebuilder:validation:Optional
	SrcMetroCode *string `json:"srcMetroCode" tf:"src_metro_code,omitempty"`

	// (Deprecated) connection source zone code is not required.
	// Connection source zone code
	// +kubebuilder:validation:Optional
	SrcZoneCode *string `json:"srcZoneCode,omitempty" tf:"src_zone_code,omitempty"`

	// connection throughput.
	// Connection throughput
	// +kubebuilder:validation:Optional
	Throughput *string `json:"throughput" tf:"throughput,omitempty"`

	// connection throughput unit (Mbps or Gbps).
	// Connection throughput unit
	// +kubebuilder:validation:Optional
	ThroughputUnit *string `json:"throughputUnit" tf:"throughput_unit,omitempty"`
}

// DeviceLinkSpec defines the desired state of DeviceLink
type DeviceLinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceLinkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeviceLinkInitParameters `json:"initProvider,omitempty"`
}

// DeviceLinkStatus defines the observed state of DeviceLink.
type DeviceLinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DeviceLink is the Schema for the DeviceLinks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type DeviceLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.device) || (has(self.initProvider) && has(self.initProvider.device))",message="spec.forProvider.device is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   DeviceLinkSpec   `json:"spec"`
	Status DeviceLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceLinkList contains a list of DeviceLinks
type DeviceLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceLink `json:"items"`
}

// Repository type metadata.
var (
	DeviceLink_Kind             = "DeviceLink"
	DeviceLink_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceLink_Kind}.String()
	DeviceLink_KindAPIVersion   = DeviceLink_Kind + "." + CRDGroupVersion.String()
	DeviceLink_GroupVersionKind = CRDGroupVersion.WithKind(DeviceLink_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceLink{}, &DeviceLinkList{})
}
