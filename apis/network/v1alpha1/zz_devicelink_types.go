/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceLinkDeviceObservation struct {
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DeviceLinkDeviceParameters struct {

	// Device ASN number
	// +kubebuilder:validation:Required
	Asn *int64 `json:"asn" tf:"asn,omitempty"`

	// Device identifier
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// Device network interface identifier to use for device link connection
	// +kubebuilder:validation:Optional
	InterfaceID *int64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`
}

type DeviceLinkObservation struct {
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type DeviceLinkParameters struct {

	// +kubebuilder:validation:Required
	Device []DeviceLinkDeviceParameters `json:"device" tf:"device,omitempty"`

	// link
	// +kubebuilder:validation:Optional
	Link []LinkParameters `json:"link,omitempty" tf:"link,omitempty"`

	// name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// subnet
	// +kubebuilder:validation:Required
	Subnet *string `json:"subnet" tf:"subnet,omitempty"`
}

type LinkObservation struct {
}

type LinkParameters struct {

	// Billing account number to be used for connection charges
	// +kubebuilder:validation:Required
	AccountNumber *string `json:"accountNumber" tf:"account_number,omitempty"`

	// Connection destination metro code
	// +kubebuilder:validation:Required
	DstMetroCode *string `json:"dstMetroCode" tf:"dst_metro_code,omitempty"`

	// Connection destination zone code
	// +kubebuilder:validation:Required
	DstZoneCode *string `json:"dstZoneCode" tf:"dst_zone_code,omitempty"`

	// Connection source metro code
	// +kubebuilder:validation:Required
	SrcMetroCode *string `json:"srcMetroCode" tf:"src_metro_code,omitempty"`

	// Connection source zone code
	// +kubebuilder:validation:Required
	SrcZoneCode *string `json:"srcZoneCode" tf:"src_zone_code,omitempty"`

	// Connection throughput
	// +kubebuilder:validation:Required
	Throughput *string `json:"throughput" tf:"throughput,omitempty"`

	// Connection throughput unit
	// +kubebuilder:validation:Required
	ThroughputUnit *string `json:"throughputUnit" tf:"throughput_unit,omitempty"`
}

// DeviceLinkSpec defines the desired state of DeviceLink
type DeviceLinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceLinkParameters `json:"forProvider"`
}

// DeviceLinkStatus defines the observed state of DeviceLink.
type DeviceLinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceLink is the Schema for the DeviceLinks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixjet}
type DeviceLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceLinkSpec   `json:"spec"`
	Status            DeviceLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceLinkList contains a list of DeviceLinks
type DeviceLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceLink `json:"items"`
}

// Repository type metadata.
var (
	DeviceLink_Kind             = "DeviceLink"
	DeviceLink_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceLink_Kind}.String()
	DeviceLink_KindAPIVersion   = DeviceLink_Kind + "." + CRDGroupVersion.String()
	DeviceLink_GroupVersionKind = CRDGroupVersion.WithKind(DeviceLink_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceLink{}, &DeviceLinkList{})
}
