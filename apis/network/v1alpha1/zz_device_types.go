/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterDetailsObservation struct {

	// The ID of the cluster.
	// The id of the cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// An object that has node0 configuration.
	// See Cluster Details - Nodes below for more details.
	// An object that has node0 details
	// +kubebuilder:validation:Required
	Node0 []Node0Observation `json:"node0,omitempty" tf:"node0,omitempty"`

	// An object that has node1 configuration.
	// See Cluster Details - Nodes below for more details.
	// An object that has node1 details
	// +kubebuilder:validation:Required
	Node1 []Node1Observation `json:"node1,omitempty" tf:"node1,omitempty"`

	// The number of nodes in the cluster.
	// The number of nodes in the cluster
	NumOfNodes *float64 `json:"numOfNodes,omitempty" tf:"num_of_nodes,omitempty"`
}

type ClusterDetailsParameters struct {

	// The name of the cluster device
	// The name of the cluster device
	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// An object that has node0 configuration.
	// See Cluster Details - Nodes below for more details.
	// An object that has node0 details
	// +kubebuilder:validation:Required
	Node0 []Node0Parameters `json:"node0" tf:"node0,omitempty"`

	// An object that has node1 configuration.
	// See Cluster Details - Nodes below for more details.
	// An object that has node1 details
	// +kubebuilder:validation:Required
	Node1 []Node1Parameters `json:"node1" tf:"node1,omitempty"`
}

type DeviceObservation struct {

	// (Autonomous System Number) Unique identifier for a network on the internet.
	// Autonomous system number
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// An object that has the cluster details. See
	// Cluster Details below for more details.
	// An object that has the cluster details
	// +kubebuilder:validation:Optional
	ClusterDetails []ClusterDetailsObservation `json:"clusterDetails,omitempty" tf:"cluster_details,omitempty"`

	// Name of the device with diverse device UUID. This field is returned in device details if the
	// device is created by passing diverse_device_id.
	// Diverse Device Name of an existing device
	DiverseDeviceName *string `json:"diverseDeviceName,omitempty" tf:"diverse_device_name,omitempty"`

	// interface identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Device location Equinix Business Exchange name.
	// Device location Equinix Business Exchange name
	Ibx *string `json:"ibx,omitempty" tf:"ibx,omitempty"`

	// List of device interfaces. See Interface Attribute below
	// for more details.
	// List of device interfaces
	Interface []InterfaceObservation `json:"interface,omitempty" tf:"interface,omitempty"`

	// Device license registration status. Possible values are APPLYING_LICENSE,
	// REGISTERED, APPLIED, WAITING_FOR_CLUSTER_SETUP, REGISTRATION_FAILED.
	// Device license registration status
	LicenseStatus *string `json:"licenseStatus,omitempty" tf:"license_status,omitempty"`

	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	// Device redundancy type applicable for HA devices, either primary or secondary
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// Unique identifier for a redundant device applicable for HA devices.
	// Unique identifier for a redundant device, applicable for HA device
	RedundantID *string `json:"redundantId,omitempty" tf:"redundant_id,omitempty"`

	// Device location region.
	// Device location region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// IP address of SSH enabled interface on the device.
	// IP address of SSH enabled interface on the device
	SSHIPAddress *string `json:"sshIpAddress,omitempty" tf:"ssh_ip_address,omitempty"`

	// FQDN of SSH enabled interface on the device.
	// FQDN of SSH enabled interface on the device
	SSHIPFqdn *string `json:"sshIpFqdn,omitempty" tf:"ssh_ip_fqdn,omitempty"`

	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	// Definition of secondary device applicable for HA setup
	// +kubebuilder:validation:Optional
	SecondaryDevice []SecondaryDeviceObservation `json:"secondaryDevice,omitempty" tf:"secondary_device,omitempty"`

	// Device provisioning status. Possible values are
	// INITIALIZING, PROVISIONING, WAITING_FOR_PRIMARY, WAITING_FOR_SECONDARY,
	// WAITING_FOR_REPLICA_CLUSTER_NODES, CLUSTER_SETUP_IN_PROGRESS, FAILED, PROVISIONED,
	// DEPROVISIONING, DEPROVISIONED, RESOURCE_UPGRADE_IN_PROGRESS, RESOURCE_UPGRADE_FAILED.
	// Device provisioning status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Device unique identifier.
	// Device unique identifier
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Device location zone code.
	// Device location zone code
	ZoneCode *string `json:"zoneCode,omitempty" tf:"zone_code,omitempty"`
}

type DeviceParameters struct {

	// Identifier of a WAN interface ACL template that will be applied on the device.
	// Unique identifier of applied ACL template
	// +kubebuilder:validation:Optional
	ACLTemplateID *string `json:"aclTemplateId,omitempty" tf:"acl_template_id,omitempty"`

	// Billing account number for a device.
	// Device billing account number
	// +kubebuilder:validation:Required
	AccountNumber *string `json:"accountNumber" tf:"account_number,omitempty"`

	// Additional Internet bandwidth, in Mbps, that will be
	// allocated to the device (in addition to default 15Mbps).
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device
	// +kubebuilder:validation:Optional
	AdditionalBandwidth *float64 `json:"additionalBandwidth,omitempty" tf:"additional_bandwidth,omitempty"`

	// Boolean value that determines device licensing mode, i.e.,
	// bring your own license or subscription (default).
	// Boolean value that determines device licensing mode: bring your own license or subscription (default)
	// +kubebuilder:validation:Optional
	Byol *bool `json:"byol,omitempty" tf:"byol,omitempty"`

	// Identifier of a cloud init file that will be applied on the device.
	// Unique identifier of applied cloud init file
	// +kubebuilder:validation:Optional
	CloudInitFileID *string `json:"cloudInitFileId,omitempty" tf:"cloud_init_file_id,omitempty"`

	// An object that has the cluster details. See
	// Cluster Details below for more details.
	// An object that has the cluster details
	// +kubebuilder:validation:Optional
	ClusterDetails []ClusterDetailsParameters `json:"clusterDetails,omitempty" tf:"cluster_details,omitempty"`

	// Device accessibility (INTERNET-ACCESS or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT).
	// If not specified, default will be INTERNET-ACCESS
	// Parameter to identify internet access for device. Supported Values: INTERNET-ACCESS(default) or PRIVATE or INTERNET-ACCESS-WITH-PRVT-MGMT
	// +kubebuilder:validation:Optional
	Connectivity *string `json:"connectivity,omitempty" tf:"connectivity,omitempty"`

	// Number of CPU cores used by device. (NOTE: Use this field to resize your device. When resizing your HA devices, primary device will be upgraded first. If the upgrade failed, device will be automatically rolled back to the previous state with original core number.)
	// Number of CPU cores used by device
	// +kubebuilder:validation:Required
	CoreCount *float64 `json:"coreCount" tf:"core_count,omitempty"`

	// Unique ID of an existing device.
	// Use this field to let Equinix know if you want your new device to be in a different location from any existing virtual
	// device. This field is only meaningful for single devices.
	// Unique ID of an existing device
	// +kubebuilder:validation:Optional
	DiverseDeviceID *string `json:"diverseDeviceId,omitempty" tf:"diverse_device_id,omitempty"`

	// Device hostname prefix.
	// Device hostname prefix
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Number of network interfaces on a device. If not specified,
	// default number for a given device type will be used.
	// Number of network interfaces on a device. If not specified, default number for a given device type will be used
	// +kubebuilder:validation:Optional
	InterfaceCount *float64 `json:"interfaceCount,omitempty" tf:"interface_count,omitempty"`

	// Path to the license file that will be uploaded and applied on a
	// device. Applicable for some device types in BYOL licensing mode.
	// Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
	// +kubebuilder:validation:Optional
	LicenseFile *string `json:"licenseFile,omitempty" tf:"license_file,omitempty"`

	// Identifier of a license file that will be applied on the device.
	// Unique identifier of applied license file
	// +kubebuilder:validation:Optional
	LicenseFileID *string `json:"licenseFileId,omitempty" tf:"license_file_id,omitempty"`

	// License Token applicable for some device types in BYOL licensing
	// mode.
	// License Token applicable for some device types in BYOL licensing mode
	// +kubebuilder:validation:Optional
	LicenseToken *string `json:"licenseToken,omitempty" tf:"license_token,omitempty"`

	// Device location metro code.
	// Device location metro code
	// +kubebuilder:validation:Required
	MetroCode *string `json:"metroCode" tf:"metro_code,omitempty"`

	// Identifier of an MGMT interface ACL template that will be
	// applied on the device.
	// Unique identifier of applied MGMT ACL template
	// +kubebuilder:validation:Optional
	MgmtACLTemplateUUID *string `json:"mgmtAclTemplateUuid,omitempty" tf:"mgmt_acl_template_uuid,omitempty"`

	// Device name.
	// Device name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// List of email addresses that will receive device status
	// notifications.
	// List of email addresses that will receive device status notifications
	// +kubebuilder:validation:Required
	Notifications []*string `json:"notifications" tf:"notifications,omitempty"`

	// Name/number used to identify device order on the invoice.
	// Name/number used to identify device order on the invoice
	// +kubebuilder:validation:Optional
	OrderReference *string `json:"orderReference,omitempty" tf:"order_reference,omitempty"`

	// Device software package code.
	// Device software package code
	// +kubebuilder:validation:Required
	PackageCode *string `json:"packageCode" tf:"package_code,omitempty"`

	// Unique Identifier for the project resource where the device is scoped to.If you
	// leave it out, the device will be created under the default project id of your organization.
	// The unique identifier of Project Resource to which device is scoped to
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Purchase order number associated with a device order.
	// Purchase order number associated with a device order
	// +kubebuilder:validation:Optional
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty" tf:"purchase_order_number,omitempty"`

	// Definition of SSH key that will be provisioned on a device
	// +kubebuilder:validation:Optional
	SSHKey []DeviceSSHKeyParameters `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// Definition of secondary device for redundant
	// device configurations. See Secondary Device below for more details.
	// Definition of secondary device applicable for HA setup
	// +kubebuilder:validation:Optional
	SecondaryDevice []SecondaryDeviceParameters `json:"secondaryDevice,omitempty" tf:"secondary_device,omitempty"`

	// Boolean value that determines device management mode, i.e.,
	// self-managed or Equinix-managed (default).
	// Boolean value that determines device management mode: self-managed or subscription (default)
	// +kubebuilder:validation:Optional
	SelfManaged *bool `json:"selfManaged,omitempty" tf:"self_managed,omitempty"`

	// Device term length.
	// Device term length
	// +kubebuilder:validation:Required
	TermLength *float64 `json:"termLength" tf:"term_length,omitempty"`

	// Device license throughput.
	// Device license throughput
	// +kubebuilder:validation:Optional
	Throughput *float64 `json:"throughput,omitempty" tf:"throughput,omitempty"`

	// License throughput unit. One of Mbps or Gbps.
	// Device license throughput unit (Mbps or Gbps)
	// +kubebuilder:validation:Optional
	ThroughputUnit *string `json:"throughputUnit,omitempty" tf:"throughput_unit,omitempty"`

	// Device type code.
	// Device type code
	// +kubebuilder:validation:Required
	TypeCode *string `json:"typeCode" tf:"type_code,omitempty"`

	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
	// +kubebuilder:validation:Optional
	VendorConfiguration map[string]*string `json:"vendorConfiguration,omitempty" tf:"vendor_configuration,omitempty"`

	// Device software software version.
	// Device software software version
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`

	// interface identifier.
	// device interface id picked for WAN
	// +kubebuilder:validation:Optional
	WanInterfaceID *string `json:"wanInterfaceId,omitempty" tf:"wan_interface_id,omitempty"`
}

type DeviceSSHKeyObservation struct {
}

type DeviceSSHKeyParameters struct {

	// Device name.
	// Reference by name to previously provisioned public SSH key
	// +kubebuilder:validation:Required
	KeyName *string `json:"keyName" tf:"key_name,omitempty"`

	// username associated with given key.
	// Username associated with given key
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type InterfaceObservation struct {

	// interface management type (Equinix Managed or empty).
	AssignedType *string `json:"assignedType,omitempty" tf:"assigned_type,omitempty"`

	// interface identifier.
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// interface IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// interface MAC address.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// reference by name to previously provisioned public SSH key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// interface operational status. One of up, down.
	OperationalStatus *string `json:"operationalStatus,omitempty" tf:"operational_status,omitempty"`

	// Device provisioning status. Possible values are
	// INITIALIZING, PROVISIONING, WAITING_FOR_PRIMARY, WAITING_FOR_SECONDARY,
	// WAITING_FOR_REPLICA_CLUSTER_NODES, CLUSTER_SETUP_IN_PROGRESS, FAILED, PROVISIONED,
	// DEPROVISIONING, DEPROVISIONED, RESOURCE_UPGRADE_IN_PROGRESS, RESOURCE_UPGRADE_FAILED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// interface type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type InterfaceParameters struct {
}

type Node0Observation struct {

	// reference by name to previously provisioned public SSH key.
	// The name of the node
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Device unique identifier.
	// The unique id of the node
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type Node0Parameters struct {

	// License file id. This is necessary for Fortinet and Juniper clusters.
	// License file id. This is necessary for Fortinet and Juniper clusters
	// +kubebuilder:validation:Optional
	LicenseFileID *string `json:"licenseFileId,omitempty" tf:"license_file_id,omitempty"`

	// License token. This is necessary for Palo Alto clusters.
	// License token. This is necessary for Palo Alto clusters
	// +kubebuilder:validation:Optional
	LicenseTokenSecretRef *v1.SecretKeySelector `json:"licenseTokenSecretRef,omitempty" tf:"-"`

	// An object that has fields relevant to the vendor of the
	// cluster device. See Cluster Details - Nodes - Vendor Configuration
	// below for more details.
	// An object that has fields relevant to the vendor of the cluster device
	// +kubebuilder:validation:Optional
	VendorConfiguration []VendorConfigurationParameters `json:"vendorConfiguration,omitempty" tf:"vendor_configuration,omitempty"`
}

type Node1Observation struct {

	// reference by name to previously provisioned public SSH key.
	// The name of the node
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Device unique identifier.
	// The unique id of the node
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type Node1Parameters struct {

	// Identifier of a license file that will be applied on a secondary device.
	// License file id. This is necessary for Fortinet and Juniper clusters
	// +kubebuilder:validation:Optional
	LicenseFileID *string `json:"licenseFileId,omitempty" tf:"license_file_id,omitempty"`

	// License Token can be provided for some device types o the device.
	// License token. This is necessary for Palo Alto clusters
	// +kubebuilder:validation:Optional
	LicenseTokenSecretRef *v1.SecretKeySelector `json:"licenseTokenSecretRef,omitempty" tf:"-"`

	// Map of vendor specific configuration parameters for a device
	// (controller1, activationKey, managementType, siteId, systemIpAddress)
	// An object that has fields relevant to the vendor of the cluster device
	// +kubebuilder:validation:Optional
	VendorConfiguration []Node1VendorConfigurationParameters `json:"vendorConfiguration,omitempty" tf:"vendor_configuration,omitempty"`
}

type Node1VendorConfigurationObservation struct {
}

type Node1VendorConfigurationParameters struct {

	// Activation key. This is required for Velocloud clusters.
	// Activation key. This is required for Velocloud clusters
	// +kubebuilder:validation:Optional
	ActivationKeySecretRef *v1.SecretKeySelector `json:"activationKeySecretRef,omitempty" tf:"-"`

	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device
	// +kubebuilder:validation:Optional
	Controller1 *string `json:"controller1,omitempty" tf:"controller1,omitempty"`

	// Controller fqdn. This is required for Velocloud clusters.
	// Controller fqdn. This is required for Velocloud clusters
	// +kubebuilder:validation:Optional
	ControllerFqdn *string `json:"controllerFqdn,omitempty" tf:"controller_fqdn,omitempty"`

	// Secondary device hostname.
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
	// +kubebuilder:validation:Optional
	RootPasswordSecretRef *v1.SecretKeySelector `json:"rootPasswordSecretRef,omitempty" tf:"-"`
}

type SSHKeyObservation struct {
}

type SSHKeyParameters struct {

	// Device name.
	// Reference by name to previously provisioned public SSH key
	// +kubebuilder:validation:Required
	KeyName *string `json:"keyName" tf:"key_name,omitempty"`

	// username associated with given key.
	// Username associated with given key
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type SecondaryDeviceInterfaceObservation struct {

	// interface management type (Equinix Managed or empty).
	AssignedType *string `json:"assignedType,omitempty" tf:"assigned_type,omitempty"`

	// interface identifier.
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// interface IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// interface MAC address.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// reference by name to previously provisioned public SSH key.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// interface operational status. One of up, down.
	OperationalStatus *string `json:"operationalStatus,omitempty" tf:"operational_status,omitempty"`

	// Device provisioning status. Possible values are
	// INITIALIZING, PROVISIONING, WAITING_FOR_PRIMARY, WAITING_FOR_SECONDARY,
	// WAITING_FOR_REPLICA_CLUSTER_NODES, CLUSTER_SETUP_IN_PROGRESS, FAILED, PROVISIONED,
	// DEPROVISIONING, DEPROVISIONED, RESOURCE_UPGRADE_IN_PROGRESS, RESOURCE_UPGRADE_FAILED.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// interface type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecondaryDeviceInterfaceParameters struct {
}

type SecondaryDeviceObservation struct {

	// (Autonomous System Number) Unique identifier for a network on the internet.
	// Autonomous system number
	Asn *float64 `json:"asn,omitempty" tf:"asn,omitempty"`

	// Device location Equinix Business Exchange name.
	// Device location Equinix Business Exchange name
	Ibx *string `json:"ibx,omitempty" tf:"ibx,omitempty"`

	// List of device interfaces. See Interface Attribute below
	// for more details.
	// List of device interfaces
	Interface []SecondaryDeviceInterfaceObservation `json:"interface,omitempty" tf:"interface,omitempty"`

	// Device license registration status. Possible values are APPLYING_LICENSE,
	// REGISTERED, APPLIED, WAITING_FOR_CLUSTER_SETUP, REGISTRATION_FAILED.
	// Device license registration status
	LicenseStatus *string `json:"licenseStatus,omitempty" tf:"license_status,omitempty"`

	// Unique Identifier for the project resource where the device is scoped to.If you
	// leave it out, the device will be created under the default project id of your organization.
	// The unique identifier of Project Resource to which device is scoped to
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Device redundancy type applicable for HA devices, either
	// primary or secondary.
	// Device redundancy type applicable for HA devices, either primary or secondary
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`

	// Unique identifier for a redundant device applicable for HA devices.
	// Unique identifier for a redundant device, applicable for HA device
	RedundantID *string `json:"redundantId,omitempty" tf:"redundant_id,omitempty"`

	// Device location region.
	// Device location region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// IP address of SSH enabled interface on the device.
	// IP address of SSH enabled interface on the device
	SSHIPAddress *string `json:"sshIpAddress,omitempty" tf:"ssh_ip_address,omitempty"`

	// FQDN of SSH enabled interface on the device.
	// FQDN of SSH enabled interface on the device
	SSHIPFqdn *string `json:"sshIpFqdn,omitempty" tf:"ssh_ip_fqdn,omitempty"`

	// Device provisioning status. Possible values are
	// INITIALIZING, PROVISIONING, WAITING_FOR_PRIMARY, WAITING_FOR_SECONDARY,
	// WAITING_FOR_REPLICA_CLUSTER_NODES, CLUSTER_SETUP_IN_PROGRESS, FAILED, PROVISIONED,
	// DEPROVISIONING, DEPROVISIONED, RESOURCE_UPGRADE_IN_PROGRESS, RESOURCE_UPGRADE_FAILED.
	// Device provisioning status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Device unique identifier.
	// Device unique identifier
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Device location zone code.
	// Device location zone code
	ZoneCode *string `json:"zoneCode,omitempty" tf:"zone_code,omitempty"`
}

type SecondaryDeviceParameters struct {

	// Identifier of a WAN interface ACL template that will be applied
	// on a secondary device.
	// Unique identifier of applied ACL template
	// +kubebuilder:validation:Optional
	ACLTemplateID *string `json:"aclTemplateId,omitempty" tf:"acl_template_id,omitempty"`

	// Billing account number for secondary device.
	// Device billing account number
	// +kubebuilder:validation:Required
	AccountNumber *string `json:"accountNumber" tf:"account_number,omitempty"`

	// Additional Internet bandwidth, in Mbps, for a secondary
	// device.
	// Additional Internet bandwidth, in Mbps, that will be allocated to the device
	// +kubebuilder:validation:Optional
	AdditionalBandwidth *float64 `json:"additionalBandwidth,omitempty" tf:"additional_bandwidth,omitempty"`

	// Identifier of a cloud init file that will be applied on a secondary device.
	// Unique identifier of applied cloud init file
	// +kubebuilder:validation:Optional
	CloudInitFileID *string `json:"cloudInitFileId,omitempty" tf:"cloud_init_file_id,omitempty"`

	// Secondary device hostname.
	// Device hostname prefix
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// Path to the license file that will be uploaded and applied on a
	// secondary device. Applicable for some device types in BYOL licensing mode.
	// Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
	// +kubebuilder:validation:Optional
	LicenseFile *string `json:"licenseFile,omitempty" tf:"license_file,omitempty"`

	// Identifier of a license file that will be applied on a secondary device.
	// Unique identifier of applied license file
	// +kubebuilder:validation:Optional
	LicenseFileID *string `json:"licenseFileId,omitempty" tf:"license_file_id,omitempty"`

	// License Token can be provided for some device types o the device.
	// License Token applicable for some device types in BYOL licensing mode
	// +kubebuilder:validation:Optional
	LicenseToken *string `json:"licenseToken,omitempty" tf:"license_token,omitempty"`

	// Metro location of a secondary device.
	// Device location metro code
	// +kubebuilder:validation:Required
	MetroCode *string `json:"metroCode" tf:"metro_code,omitempty"`

	// Identifier of an MGMT interface ACL template that will be
	// applied on a secondary device.
	// Unique identifier of applied MGMT ACL template
	// +kubebuilder:validation:Optional
	MgmtACLTemplateUUID *string `json:"mgmtAclTemplateUuid,omitempty" tf:"mgmt_acl_template_uuid,omitempty"`

	// Secondary device name.
	// Device name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// List of email addresses that will receive notifications about
	// secondary device.
	// List of email addresses that will receive device status notifications
	// +kubebuilder:validation:Required
	Notifications []*string `json:"notifications" tf:"notifications,omitempty"`

	// Definition of SSH key that will be provisioned on a device
	// +kubebuilder:validation:Optional
	SSHKey []SSHKeyParameters `json:"sshKey,omitempty" tf:"ssh_key,omitempty"`

	// Key/Value pairs of vendor specific configuration parameters
	// for a secondary device. Key values are controller1, activationKey, managementType, siteId,
	// systemIpAddress.
	// Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
	// +kubebuilder:validation:Optional
	VendorConfiguration map[string]*string `json:"vendorConfiguration,omitempty" tf:"vendor_configuration,omitempty"`

	// interface identifier.
	// device interface id picked for WAN
	// +kubebuilder:validation:Optional
	WanInterfaceID *string `json:"wanInterfaceId,omitempty" tf:"wan_interface_id,omitempty"`
}

type VendorConfigurationObservation struct {
}

type VendorConfigurationParameters struct {

	// Activation key. This is required for Velocloud clusters.
	// Activation key. This is required for Velocloud clusters
	// +kubebuilder:validation:Optional
	ActivationKeySecretRef *v1.SecretKeySelector `json:"activationKeySecretRef,omitempty" tf:"-"`

	// The administrative password of the device. You can use it to log in
	// to the console. This field is not available for all device types.
	// The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// System IP Address. Mandatory for the Fortinet SDWAN cluster device.
	// System IP Address. Mandatory for the Fortinet SDWAN cluster device
	// +kubebuilder:validation:Optional
	Controller1 *string `json:"controller1,omitempty" tf:"controller1,omitempty"`

	// Controller fqdn. This is required for Velocloud clusters.
	// Controller fqdn. This is required for Velocloud clusters
	// +kubebuilder:validation:Optional
	ControllerFqdn *string `json:"controllerFqdn,omitempty" tf:"controller_fqdn,omitempty"`

	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters.
	// Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The CLI password of the device. This field is relevant only for the
	// Velocloud SDWAN cluster.
	// The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
	// +kubebuilder:validation:Optional
	RootPasswordSecretRef *v1.SecretKeySelector `json:"rootPasswordSecretRef,omitempty" tf:"-"`
}

// DeviceSpec defines the desired state of Device
type DeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceParameters `json:"forProvider"`
}

// DeviceStatus defines the observed state of Device.
type DeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Device is the Schema for the Devices API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type Device struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceSpec   `json:"spec"`
	Status            DeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceList contains a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Device `json:"items"`
}

// Repository type metadata.
var (
	Device_Kind             = "Device"
	Device_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Device_Kind}.String()
	Device_KindAPIVersion   = Device_Kind + "." + CRDGroupVersion.String()
	Device_GroupVersionKind = CRDGroupVersion.WithKind(Device_Kind)
)

func init() {
	SchemeBuilder.Register(&Device{}, &DeviceList{})
}
