/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BgpObservation struct {
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	ProvisioningStatus *string `json:"provisioningStatus,omitempty" tf:"provisioning_status,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type BgpParameters struct {

	// Shared key used for BGP peer authentication
	// +kubebuilder:validation:Optional
	AuthenticationKeySecretRef *v1.SecretKeySelector `json:"authenticationKeySecretRef,omitempty" tf:"-"`

	// Identifier of a connection established between network device and remote service provider that will be used for peering
	// +kubebuilder:validation:Required
	ConnectionID *string `json:"connectionId" tf:"connection_id,omitempty"`

	// Local ASN number
	// +kubebuilder:validation:Required
	LocalAsn *int64 `json:"localAsn" tf:"local_asn,omitempty"`

	// IP address in CIDR format of a local device
	// +kubebuilder:validation:Required
	LocalIPAddress *string `json:"localIpAddress" tf:"local_ip_address,omitempty"`

	// Remote ASN number
	// +kubebuilder:validation:Required
	RemoteAsn *int64 `json:"remoteAsn" tf:"remote_asn,omitempty"`

	// IP address of remote peer
	// +kubebuilder:validation:Required
	RemoteIPAddress *string `json:"remoteIpAddress" tf:"remote_ip_address,omitempty"`
}

// BgpSpec defines the desired state of Bgp
type BgpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BgpParameters `json:"forProvider"`
}

// BgpStatus defines the observed state of Bgp.
type BgpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BgpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Bgp is the Schema for the Bgps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixjet}
type Bgp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BgpSpec   `json:"spec"`
	Status            BgpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BgpList contains a list of Bgps
type BgpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bgp `json:"items"`
}

// Repository type metadata.
var (
	Bgp_Kind             = "Bgp"
	Bgp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bgp_Kind}.String()
	Bgp_KindAPIVersion   = Bgp_Kind + "." + CRDGroupVersion.String()
	Bgp_GroupVersionKind = CRDGroupVersion.WithKind(Bgp_Kind)
)

func init() {
	SchemeBuilder.Register(&Bgp{}, &BgpList{})
}
