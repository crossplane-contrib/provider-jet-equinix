/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AclTemplateObservation struct {
	DeviceACLStatus *string `json:"deviceAclStatus,omitempty" tf:"device_acl_status,omitempty"`

	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AclTemplateParameters struct {

	// ACL template description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// One or more rules to specify allowed inbound traffic. Rules are ordered, matching traffic rule stops processing subsequent ones.
	// +kubebuilder:validation:Required
	InboundRule []InboundRuleParameters `json:"inboundRule" tf:"inbound_rule,omitempty"`

	// ACL template location metro code
	// +kubebuilder:validation:Required
	MetroCode *string `json:"metroCode" tf:"metro_code,omitempty"`

	// ACL template name
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type InboundRuleObservation struct {
	SequenceNumber *int64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type InboundRuleParameters struct {

	// Inbound traffic destination ports. Either up to 10, comma separated ports or port range or any word
	// +kubebuilder:validation:Required
	DstPort *string `json:"dstPort" tf:"dst_port,omitempty"`

	// Inbound traffic protocol. One of: `IP`, `TCP`, `UDP`
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// Inbound traffic source ports. Either up to 10, comma separated ports or port range or any word
	// +kubebuilder:validation:Required
	SrcPort *string `json:"srcPort" tf:"src_port,omitempty"`

	// Inbound traffic source IP subnets in CIDR format
	// +kubebuilder:validation:Required
	Subnets []*string `json:"subnets" tf:"subnets,omitempty"`
}

// AclTemplateSpec defines the desired state of AclTemplate
type AclTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AclTemplateParameters `json:"forProvider"`
}

// AclTemplateStatus defines the observed state of AclTemplate.
type AclTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AclTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AclTemplate is the Schema for the AclTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixjet}
type AclTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AclTemplateSpec   `json:"spec"`
	Status            AclTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AclTemplateList contains a list of AclTemplates
type AclTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AclTemplate `json:"items"`
}

// Repository type metadata.
var (
	AclTemplate_Kind             = "AclTemplate"
	AclTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AclTemplate_Kind}.String()
	AclTemplate_KindAPIVersion   = AclTemplate_Kind + "." + CRDGroupVersion.String()
	AclTemplate_GroupVersionKind = CRDGroupVersion.WithKind(AclTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&AclTemplate{}, &AclTemplateList{})
}
