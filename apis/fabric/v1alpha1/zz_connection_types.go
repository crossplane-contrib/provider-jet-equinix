/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ASideObservation struct {

	// Point of access details
	// +kubebuilder:validation:Optional
	AccessPoint []AccessPointObservation `json:"accessPoint,omitempty" tf:"access_point,omitempty"`

	// For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
	// +kubebuilder:validation:Optional
	ServiceToken []ServiceTokenObservation `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type ASideParameters struct {

	// Point of access details
	// +kubebuilder:validation:Optional
	AccessPoint []AccessPointParameters `json:"accessPoint,omitempty" tf:"access_point,omitempty"`

	// Connection side additional information
	// +kubebuilder:validation:Optional
	AdditionalInfo []AdditionalInfoParameters `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
	// +kubebuilder:validation:Optional
	ServiceToken []ServiceTokenParameters `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type AccessPointAccountObservation struct {

	// Account Name
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Account Number
	AccountNumber *float64 `json:"accountNumber,omitempty" tf:"account_number,omitempty"`

	// Global Customer organization identifier
	GlobalCustID *string `json:"globalCustId,omitempty" tf:"global_cust_id,omitempty"`

	// Global organization identifier
	GlobalOrgID *string `json:"globalOrgId,omitempty" tf:"global_org_id,omitempty"`

	// Global organization name
	GlobalOrganizationName *string `json:"globalOrganizationName,omitempty" tf:"global_organization_name,omitempty"`

	// Customer organization identifier
	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Customer organization name
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`
}

type AccessPointAccountParameters struct {
}

type AccessPointGatewayObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type AccessPointGatewayParameters struct {

	// Equinix-assigned virtual gateway identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointInterfaceObservation struct {

	// id
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessPointInterfaceParameters struct {

	// Interface type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned interface identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointLinkProtocolObservation struct {
}

type AccessPointLinkProtocolParameters struct {

	// Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Vlan Customer Tag information, vlanCTag value specified for QINQ connections
	// +kubebuilder:validation:Optional
	VlanCTag *float64 `json:"vlanCTag,omitempty" tf:"vlan_c_tag,omitempty"`

	// Vlan Provider Tag information, vlanSTag value specified for QINQ connections
	// +kubebuilder:validation:Optional
	VlanSTag *float64 `json:"vlanSTag,omitempty" tf:"vlan_s_tag,omitempty"`

	// Vlan Tag information, vlanTag value specified for DOT1Q connections
	// +kubebuilder:validation:Optional
	VlanTag *float64 `json:"vlanTag,omitempty" tf:"vlan_tag,omitempty"`
}

type AccessPointLocationObservation struct {
}

type AccessPointLocationParameters struct {

	// IBX Code
	// +kubebuilder:validation:Optional
	Ibx *string `json:"ibx,omitempty" tf:"ibx,omitempty"`

	// Access point metro code
	// +kubebuilder:validation:Optional
	MetroCode *string `json:"metroCode,omitempty" tf:"metro_code,omitempty"`

	// Access point metro name
	// +kubebuilder:validation:Optional
	MetroName *string `json:"metroName,omitempty" tf:"metro_name,omitempty"`

	// Access point region
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type AccessPointNetworkObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type AccessPointNetworkParameters struct {

	// Equinix-assigned Network identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointObservation struct {

	// Account
	// +kubebuilder:validation:Optional
	Account []AccessPointAccountObservation `json:"account,omitempty" tf:"account,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Gateway []GatewayObservation `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Virtual device interface
	// +kubebuilder:validation:Optional
	Interface []InterfaceObservation `json:"interface,omitempty" tf:"interface,omitempty"`

	// network access point information
	// +kubebuilder:validation:Optional
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// Port access point information
	// +kubebuilder:validation:Optional
	Port []PortObservation `json:"port,omitempty" tf:"port,omitempty"`

	// Service Profile
	// +kubebuilder:validation:Optional
	Profile []ProfileObservation `json:"profile,omitempty" tf:"profile,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Router []RouterObservation `json:"router,omitempty" tf:"router,omitempty"`

	// Virtual device
	// +kubebuilder:validation:Optional
	VirtualDevice []VirtualDeviceObservation `json:"virtualDevice,omitempty" tf:"virtual_device,omitempty"`
}

type AccessPointParameters struct {

	// Account
	// +kubebuilder:validation:Optional
	Account []AccessPointAccountParameters `json:"account,omitempty" tf:"account,omitempty"`

	// Authentication key for provider based connections
	// +kubebuilder:validation:Optional
	AuthenticationKey *string `json:"authenticationKey,omitempty" tf:"authentication_key,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Gateway []GatewayParameters `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Virtual device interface
	// +kubebuilder:validation:Optional
	Interface []InterfaceParameters `json:"interface,omitempty" tf:"interface,omitempty"`

	// Connection link protocol
	// +kubebuilder:validation:Optional
	LinkProtocol []LinkProtocolParameters `json:"linkProtocol,omitempty" tf:"link_protocol,omitempty"`

	// Access point location
	// +kubebuilder:validation:Optional
	Location []AccessPointLocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// network access point information
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
	// +kubebuilder:validation:Optional
	PeeringType *string `json:"peeringType,omitempty" tf:"peering_type,omitempty"`

	// Port access point information
	// +kubebuilder:validation:Optional
	Port []PortParameters `json:"port,omitempty" tf:"port,omitempty"`

	// Service Profile
	// +kubebuilder:validation:Optional
	Profile []ProfileParameters `json:"profile,omitempty" tf:"profile,omitempty"`

	// Provider assigned Connection Id
	// +kubebuilder:validation:Optional
	ProviderConnectionID *string `json:"providerConnectionId,omitempty" tf:"provider_connection_id,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Router []RouterParameters `json:"router,omitempty" tf:"router,omitempty"`

	// Access point routing protocols configuration
	// +kubebuilder:validation:Optional
	RoutingProtocols []RoutingProtocolsParameters `json:"routingProtocols,omitempty" tf:"routing_protocols,omitempty"`

	// Access point seller region
	// +kubebuilder:validation:Optional
	SellerRegion *string `json:"sellerRegion,omitempty" tf:"seller_region,omitempty"`

	// Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Virtual device
	// +kubebuilder:validation:Optional
	VirtualDevice []VirtualDeviceParameters `json:"virtualDevice,omitempty" tf:"virtual_device,omitempty"`
}

type AccessPointPortObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// Port name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Redundancy Information
	Redundancy []PortRedundancyObservation `json:"redundancy,omitempty" tf:"redundancy,omitempty"`
}

type AccessPointPortParameters struct {

	// Equinix-assigned Port identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointProfileObservation struct {

	// Access point config information
	AccessPointTypeConfigs []ProfileAccessPointTypeConfigsObservation `json:"accessPointTypeConfigs,omitempty" tf:"access_point_type_configs,omitempty"`

	// User-provided service description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Service Profile URI response attribute
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// Customer-assigned service profile name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AccessPointProfileParameters struct {

	// Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Equinix assigned service profile identifier
	// +kubebuilder:validation:Required
	UUID *string `json:"uuid" tf:"uuid,omitempty"`
}

type AccessPointRouterObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type AccessPointRouterParameters struct {

	// Equinix-assigned virtual gateway identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointRoutingProtocolsObservation struct {
}

type AccessPointRoutingProtocolsParameters struct {

	// Routing protocol instance state
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Routing Protocol type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned Routing protocol identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointTypeConfigsObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AccessPointTypeConfigsParameters struct {
}

type AccessPointVirtualDeviceObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type AccessPointVirtualDeviceParameters struct {

	// Virtual Device type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned Virtual Device identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AdditionalInfoObservation struct {
}

type AdditionalInfoParameters struct {

	// Additional information key
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Additional information value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConnectionAccountObservation struct {
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	AccountNumber *float64 `json:"accountNumber,omitempty" tf:"account_number,omitempty"`

	GlobalCustID *string `json:"globalCustId,omitempty" tf:"global_cust_id,omitempty"`

	GlobalOrgID *string `json:"globalOrgId,omitempty" tf:"global_org_id,omitempty"`

	GlobalOrganizationName *string `json:"globalOrganizationName,omitempty" tf:"global_organization_name,omitempty"`

	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`
}

type ConnectionAccountParameters struct {
}

type ConnectionChangeLogObservation struct {
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	CreatedByEmail *string `json:"createdByEmail,omitempty" tf:"created_by_email,omitempty"`

	CreatedByFullName *string `json:"createdByFullName,omitempty" tf:"created_by_full_name,omitempty"`

	CreatedDateTime *string `json:"createdDateTime,omitempty" tf:"created_date_time,omitempty"`

	DeletedBy *string `json:"deletedBy,omitempty" tf:"deleted_by,omitempty"`

	DeletedByEmail *string `json:"deletedByEmail,omitempty" tf:"deleted_by_email,omitempty"`

	DeletedByFullName *string `json:"deletedByFullName,omitempty" tf:"deleted_by_full_name,omitempty"`

	DeletedDateTime *string `json:"deletedDateTime,omitempty" tf:"deleted_date_time,omitempty"`

	UpdatedBy *string `json:"updatedBy,omitempty" tf:"updated_by,omitempty"`

	UpdatedByEmail *string `json:"updatedByEmail,omitempty" tf:"updated_by_email,omitempty"`

	UpdatedByFullName *string `json:"updatedByFullName,omitempty" tf:"updated_by_full_name,omitempty"`

	UpdatedDateTime *string `json:"updatedDateTime,omitempty" tf:"updated_date_time,omitempty"`
}

type ConnectionChangeLogParameters struct {
}

type ConnectionNotificationsObservation struct {
}

type ConnectionNotificationsParameters struct {

	// Array of contact emails
	// +kubebuilder:validation:Required
	Emails []*string `json:"emails" tf:"emails,omitempty"`

	// Send interval
	// +kubebuilder:validation:Optional
	SendInterval *string `json:"sendInterval,omitempty" tf:"send_interval,omitempty"`

	// Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ConnectionObservation struct {

	// Requester or Customer side connection configuration object of the multi-segment connection
	// +kubebuilder:validation:Required
	ASide []ASideObservation `json:"aSide,omitempty" tf:"a_side,omitempty"`

	// Customer account information that is associated with this connection
	Account []ConnectionAccountObservation `json:"account,omitempty" tf:"account,omitempty"`

	// Captures connection lifecycle change information
	ChangeLog []ConnectionChangeLogObservation `json:"changeLog,omitempty" tf:"change_log,omitempty"`

	// Connection directionality from the requester point of view
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Connection URI information
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Connection property derived from access point locations
	IsRemote *bool `json:"isRemote,omitempty" tf:"is_remote,omitempty"`

	// Connection type-specific operational data
	Operation []OperationObservation `json:"operation,omitempty" tf:"operation,omitempty"`

	// Order related to this connection information
	// +kubebuilder:validation:Optional
	Order []ConnectionOrderObservation `json:"order,omitempty" tf:"order,omitempty"`

	// Project information
	// +kubebuilder:validation:Optional
	Project []ConnectionProjectObservation `json:"project,omitempty" tf:"project,omitempty"`

	// Connection overall state
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Destination or Provider side connection configuration object of the multi-segment connection
	// +kubebuilder:validation:Required
	ZSide []ZSideObservation `json:"zSide,omitempty" tf:"z_side,omitempty"`
}

type ConnectionOrderObservation struct {

	// Order Identification
	OrderID *string `json:"orderId,omitempty" tf:"order_id,omitempty"`

	// Order Reference Number
	OrderNumber *string `json:"orderNumber,omitempty" tf:"order_number,omitempty"`
}

type ConnectionOrderParameters struct {

	// Billing tier for connection bandwidth
	// +kubebuilder:validation:Optional
	BillingTier *string `json:"billingTier,omitempty" tf:"billing_tier,omitempty"`

	// Purchase order number
	// +kubebuilder:validation:Optional
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty" tf:"purchase_order_number,omitempty"`
}

type ConnectionParameters struct {

	// Requester or Customer side connection configuration object of the multi-segment connection
	// +kubebuilder:validation:Required
	ASide []ASideParameters `json:"aSide" tf:"a_side,omitempty"`

	// Connection additional information
	// +kubebuilder:validation:Optional
	AdditionalInfo []map[string]*string `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// Connection bandwidth in Mbps
	// +kubebuilder:validation:Required
	Bandwidth *float64 `json:"bandwidth" tf:"bandwidth,omitempty"`

	// Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Preferences for notifications on connection configuration or status changes
	// +kubebuilder:validation:Required
	Notifications []ConnectionNotificationsParameters `json:"notifications" tf:"notifications,omitempty"`

	// Order related to this connection information
	// +kubebuilder:validation:Optional
	Order []ConnectionOrderParameters `json:"order,omitempty" tf:"order,omitempty"`

	// Project information
	// +kubebuilder:validation:Optional
	Project []ConnectionProjectParameters `json:"project,omitempty" tf:"project,omitempty"`

	// Redundancy Information
	// +kubebuilder:validation:Optional
	Redundancy []ConnectionRedundancyParameters `json:"redundancy,omitempty" tf:"redundancy,omitempty"`

	// Defines the connection type like VG_VC, EVPL_VC, EPL_VC, EC_VC, IP_VC, IPWAN_VC,ACCESS_EPL_VC
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Destination or Provider side connection configuration object of the multi-segment connection
	// +kubebuilder:validation:Required
	ZSide []ZSideParameters `json:"zSide" tf:"z_side,omitempty"`
}

type ConnectionProjectObservation struct {

	// Unique Resource URL
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// Project Id
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ConnectionProjectParameters struct {
}

type ConnectionRedundancyObservation struct {
}

type ConnectionRedundancyParameters struct {

	// Redundancy group identifier
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Priority type- PRIMARY, SECONDARY
	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type ErrorsAdditionalInfoObservation struct {
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`
}

type ErrorsAdditionalInfoParameters struct {
}

type ErrorsObservation struct {
	AdditionalInfo []ErrorsAdditionalInfoObservation `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	CorrelationID *string `json:"correlationId,omitempty" tf:"correlation_id,omitempty"`

	Details *string `json:"details,omitempty" tf:"details,omitempty"`

	ErrorCode *string `json:"errorCode,omitempty" tf:"error_code,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message,omitempty"`

	Help *string `json:"help,omitempty" tf:"help,omitempty"`
}

type ErrorsParameters struct {
}

type GatewayObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type GatewayParameters struct {

	// Equinix-assigned virtual gateway identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type InterfaceObservation struct {

	// id
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type InterfaceParameters struct {

	// Interface type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned interface identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type LinkProtocolObservation struct {
}

type LinkProtocolParameters struct {

	// Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Vlan Customer Tag information, vlanCTag value specified for QINQ connections
	// +kubebuilder:validation:Optional
	VlanCTag *float64 `json:"vlanCTag,omitempty" tf:"vlan_c_tag,omitempty"`

	// Vlan Provider Tag information, vlanSTag value specified for QINQ connections
	// +kubebuilder:validation:Optional
	VlanSTag *float64 `json:"vlanSTag,omitempty" tf:"vlan_s_tag,omitempty"`

	// Vlan Tag information, vlanTag value specified for DOT1Q connections
	// +kubebuilder:validation:Optional
	VlanTag *float64 `json:"vlanTag,omitempty" tf:"vlan_tag,omitempty"`
}

type NetworkObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type NetworkParameters struct {

	// Equinix-assigned Network identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type OperationObservation struct {
	EquinixStatus *string `json:"equinixStatus,omitempty" tf:"equinix_status,omitempty"`

	Errors []ErrorsObservation `json:"errors,omitempty" tf:"errors,omitempty"`

	ProviderStatus *string `json:"providerStatus,omitempty" tf:"provider_status,omitempty"`
}

type OperationParameters struct {
}

type PortObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// Port name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Redundancy Information
	Redundancy []RedundancyObservation `json:"redundancy,omitempty" tf:"redundancy,omitempty"`
}

type PortParameters struct {

	// Equinix-assigned Port identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type PortRedundancyObservation struct {
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type PortRedundancyParameters struct {
}

type ProfileAccessPointTypeConfigsObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ProfileAccessPointTypeConfigsParameters struct {
}

type ProfileObservation struct {

	// Access point config information
	AccessPointTypeConfigs []AccessPointTypeConfigsObservation `json:"accessPointTypeConfigs,omitempty" tf:"access_point_type_configs,omitempty"`

	// User-provided service description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Service Profile URI response attribute
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// Customer-assigned service profile name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProfileParameters struct {

	// Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// Equinix assigned service profile identifier
	// +kubebuilder:validation:Required
	UUID *string `json:"uuid" tf:"uuid,omitempty"`
}

type RedundancyObservation struct {
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type RedundancyParameters struct {
}

type RouterObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type RouterParameters struct {

	// Equinix-assigned virtual gateway identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type RoutingProtocolsObservation struct {
}

type RoutingProtocolsParameters struct {

	// Routing protocol instance state
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Routing Protocol type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned Routing protocol identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ServiceTokenObservation struct {

	// Service token description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An absolute URL that is the subject of the link's context
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type ServiceTokenParameters struct {

	// Token type - VC_TOKEN
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned service token identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type VirtualDeviceObservation struct {

	// Unique Resource Identifier
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type VirtualDeviceParameters struct {

	// Virtual Device type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned Virtual Device identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ZSideAccessPointAccountObservation struct {

	// Account Name
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// Account Number
	AccountNumber *float64 `json:"accountNumber,omitempty" tf:"account_number,omitempty"`

	// Global Customer organization identifier
	GlobalCustID *string `json:"globalCustId,omitempty" tf:"global_cust_id,omitempty"`

	// Global organization identifier
	GlobalOrgID *string `json:"globalOrgId,omitempty" tf:"global_org_id,omitempty"`

	// Global organization name
	GlobalOrganizationName *string `json:"globalOrganizationName,omitempty" tf:"global_organization_name,omitempty"`

	// Customer organization identifier
	OrgID *float64 `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Customer organization name
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`
}

type ZSideAccessPointAccountParameters struct {
}

type ZSideAccessPointLocationObservation struct {
}

type ZSideAccessPointLocationParameters struct {

	// IBX Code
	// +kubebuilder:validation:Optional
	Ibx *string `json:"ibx,omitempty" tf:"ibx,omitempty"`

	// Access point metro code
	// +kubebuilder:validation:Optional
	MetroCode *string `json:"metroCode,omitempty" tf:"metro_code,omitempty"`

	// Access point metro name
	// +kubebuilder:validation:Optional
	MetroName *string `json:"metroName,omitempty" tf:"metro_name,omitempty"`

	// Access point region
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ZSideAccessPointObservation struct {

	// Account
	// +kubebuilder:validation:Optional
	Account []ZSideAccessPointAccountObservation `json:"account,omitempty" tf:"account,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Gateway []AccessPointGatewayObservation `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Virtual device interface
	// +kubebuilder:validation:Optional
	Interface []AccessPointInterfaceObservation `json:"interface,omitempty" tf:"interface,omitempty"`

	// network access point information
	// +kubebuilder:validation:Optional
	Network []AccessPointNetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// Port access point information
	// +kubebuilder:validation:Optional
	Port []AccessPointPortObservation `json:"port,omitempty" tf:"port,omitempty"`

	// Service Profile
	// +kubebuilder:validation:Optional
	Profile []AccessPointProfileObservation `json:"profile,omitempty" tf:"profile,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Router []AccessPointRouterObservation `json:"router,omitempty" tf:"router,omitempty"`

	// Virtual device
	// +kubebuilder:validation:Optional
	VirtualDevice []AccessPointVirtualDeviceObservation `json:"virtualDevice,omitempty" tf:"virtual_device,omitempty"`
}

type ZSideAccessPointParameters struct {

	// Account
	// +kubebuilder:validation:Optional
	Account []ZSideAccessPointAccountParameters `json:"account,omitempty" tf:"account,omitempty"`

	// Authentication key for provider based connections
	// +kubebuilder:validation:Optional
	AuthenticationKey *string `json:"authenticationKey,omitempty" tf:"authentication_key,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Gateway []AccessPointGatewayParameters `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// Virtual device interface
	// +kubebuilder:validation:Optional
	Interface []AccessPointInterfaceParameters `json:"interface,omitempty" tf:"interface,omitempty"`

	// Connection link protocol
	// +kubebuilder:validation:Optional
	LinkProtocol []AccessPointLinkProtocolParameters `json:"linkProtocol,omitempty" tf:"link_protocol,omitempty"`

	// Access point location
	// +kubebuilder:validation:Optional
	Location []ZSideAccessPointLocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// network access point information
	// +kubebuilder:validation:Optional
	Network []AccessPointNetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
	// +kubebuilder:validation:Optional
	PeeringType *string `json:"peeringType,omitempty" tf:"peering_type,omitempty"`

	// Port access point information
	// +kubebuilder:validation:Optional
	Port []AccessPointPortParameters `json:"port,omitempty" tf:"port,omitempty"`

	// Service Profile
	// +kubebuilder:validation:Optional
	Profile []AccessPointProfileParameters `json:"profile,omitempty" tf:"profile,omitempty"`

	// Provider assigned Connection Id
	// +kubebuilder:validation:Optional
	ProviderConnectionID *string `json:"providerConnectionId,omitempty" tf:"provider_connection_id,omitempty"`

	// Cloud Router access point information
	// +kubebuilder:validation:Optional
	Router []AccessPointRouterParameters `json:"router,omitempty" tf:"router,omitempty"`

	// Access point routing protocols configuration
	// +kubebuilder:validation:Optional
	RoutingProtocols []AccessPointRoutingProtocolsParameters `json:"routingProtocols,omitempty" tf:"routing_protocols,omitempty"`

	// Access point seller region
	// +kubebuilder:validation:Optional
	SellerRegion *string `json:"sellerRegion,omitempty" tf:"seller_region,omitempty"`

	// Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Virtual device
	// +kubebuilder:validation:Optional
	VirtualDevice []AccessPointVirtualDeviceParameters `json:"virtualDevice,omitempty" tf:"virtual_device,omitempty"`
}

type ZSideAdditionalInfoObservation struct {
}

type ZSideAdditionalInfoParameters struct {

	// Additional information key
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Additional information value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ZSideObservation struct {

	// Point of access details
	// +kubebuilder:validation:Optional
	AccessPoint []ZSideAccessPointObservation `json:"accessPoint,omitempty" tf:"access_point,omitempty"`

	// For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
	// +kubebuilder:validation:Optional
	ServiceToken []ZSideServiceTokenObservation `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type ZSideParameters struct {

	// Point of access details
	// +kubebuilder:validation:Optional
	AccessPoint []ZSideAccessPointParameters `json:"accessPoint,omitempty" tf:"access_point,omitempty"`

	// Connection side additional information
	// +kubebuilder:validation:Optional
	AdditionalInfo []ZSideAdditionalInfoParameters `json:"additionalInfo,omitempty" tf:"additional_info,omitempty"`

	// For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
	// +kubebuilder:validation:Optional
	ServiceToken []ZSideServiceTokenParameters `json:"serviceToken,omitempty" tf:"service_token,omitempty"`
}

type ZSideServiceTokenObservation struct {

	// Service token description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An absolute URL that is the subject of the link's context
	Href *string `json:"href,omitempty" tf:"href,omitempty"`
}

type ZSideServiceTokenParameters struct {

	// Token type - VC_TOKEN
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Equinix-assigned service token identifier
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// ConnectionSpec defines the desired state of Connection
type ConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionParameters `json:"forProvider"`
}

// ConnectionStatus defines the observed state of Connection.
type ConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Connection is the Schema for the Connections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type Connection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectionSpec   `json:"spec"`
	Status            ConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionList contains a list of Connections
type ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Connection `json:"items"`
}

// Repository type metadata.
var (
	Connection_Kind             = "Connection"
	Connection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Connection_Kind}.String()
	Connection_KindAPIVersion   = Connection_Kind + "." + CRDGroupVersion.String()
	Connection_GroupVersionKind = CRDGroupVersion.WithKind(Connection_Kind)
)

func init() {
	SchemeBuilder.Register(&Connection{}, &ConnectionList{})
}
