/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BehaviorInitParameters struct {

	// (List of String) List of attributes that are allowed to change without recreating the instance. Supported attributes: custom_data, user_data
	// List of attributes that are allowed to change without recreating the instance. Supported attributes: `custom_data`, `user_data`
	AllowChanges []*string `json:"allowChanges,omitempty" tf:"allow_changes,omitempty"`
}

type BehaviorObservation struct {

	// (List of String) List of attributes that are allowed to change without recreating the instance. Supported attributes: custom_data, user_data
	// List of attributes that are allowed to change without recreating the instance. Supported attributes: `custom_data`, `user_data`
	AllowChanges []*string `json:"allowChanges,omitempty" tf:"allow_changes,omitempty"`
}

type BehaviorParameters struct {

	// (List of String) List of attributes that are allowed to change without recreating the instance. Supported attributes: custom_data, user_data
	// List of attributes that are allowed to change without recreating the instance. Supported attributes: `custom_data`, `user_data`
	// +kubebuilder:validation:Optional
	AllowChanges []*string `json:"allowChanges,omitempty" tf:"allow_changes,omitempty"`
}

type DeviceInitParameters struct {

	// (Boolean) If true, a device with OS custom_ipxe will
	// If true, a device with OS custom_ipxe will
	AlwaysPxe *bool `json:"alwaysPxe,omitempty" tf:"always_pxe,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Behavior []BehaviorInitParameters `json:"behavior,omitempty" tf:"behavior,omitempty"`

	// (String) monthly or hourly
	// monthly or hourly
	BillingCycle *string `json:"billingCycle,omitempty" tf:"billing_cycle,omitempty"`

	// place instead of recreated.
	// A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `"custom_data"`, the device will be updated in-place instead of recreated.
	CustomDataSecretRef *v1.SecretKeySelector `json:"customDataSecretRef,omitempty" tf:"-"`

	// (String) Description string for the device
	// Description string for the device
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (List of String, Deprecated) List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit Facilities API docs, set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	// List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	Facilities []*string `json:"facilities,omitempty" tf:"facilities,omitempty"`

	// (Boolean) Delete device even if it has volumes attached. Only applies for destroy action
	// Delete device even if it has volumes attached. Only applies for destroy action
	ForceDetachVolumes *bool `json:"forceDetachVolumes,omitempty" tf:"force_detach_volumes,omitempty"`

	// available if you want to pick your next available reservation automatically
	// The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your next available reservation automatically
	HardwareReservationID *string `json:"hardwareReservationId,omitempty" tf:"hardware_reservation_id,omitempty"`

	// (String) The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	// The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (Block List) A list of IP address types for the device (structure is documented below) (see below for nested schema)
	// A list of IP address types for the device (structure is documented below)
	IPAddress []IPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) URL pointing to a hosted iPXE script. More
	// URL pointing to a hosted iPXE script. More
	IpxeScriptURL *string `json:"ipxeScriptUrl,omitempty" tf:"ipxe_script_url,omitempty"`

	// (Boolean) Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached
	// Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// (String) Metro area for the new device. Conflicts with facilities
	// Metro area for the new device. Conflicts with facilities
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// place instead of recreated.
	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your API auth token in the top of the page and see JSON from the API response.  By default, changing this attribute will cause your device to be deleted and recreated.  If `reinstall` is enabled, the device will be updated in-place instead of recreated.
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// metal server and plan documentation
	// The device plan slug. To find the plan slug, visit the [bare-metal server](https://deploy.equinix.com/product/bare-metal/servers/) and [plan documentation](https://deploy.equinix.com/developers/docs/metal/hardware/standard-servers/)
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (String) The ID of the project in which to create the device
	// The ID of the project in which to create the device
	// +crossplane:generate:reference:type=Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (List of String) Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the equinix_metal_project_ssh_key resource
	// Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the [equinix_metal_project_ssh_key](equinix_metal_project_ssh_key.md) resource
	ProjectSSHKeyIds []*string `json:"projectSshKeyIds,omitempty" tf:"project_ssh_key_ids,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Reinstall []ReinstallInitParameters `json:"reinstall,omitempty" tf:"reinstall,omitempty"`

	// (String) JSON for custom partitioning. Only usable on reserved hardware. More information in in the Custom Partitioning and RAID doc
	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/) doc
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// (List of String) Tags attached to the device
	// Tags attached to the device
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// 09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	// Timestamp for device termination. For example "2021-09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	TerminationTime *string `json:"terminationTime,omitempty" tf:"termination_time,omitempty"`

	// place instead of recreated.
	// A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `"user_data"`, the device will be updated in-place instead of recreated.
	UserDataSecretRef *v1.SecretKeySelector `json:"userDataSecretRef,omitempty" tf:"-"`

	// (List of String) Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the equinix_metal_ssh_key resource
	// Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the [equinix_metal_ssh_key](equinix_metal_ssh_key.md) resource
	UserSSHKeyIds []*string `json:"userSshKeyIds,omitempty" tf:"user_ssh_key_ids,omitempty"`

	// (Boolean) Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	// Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	WaitForReservationDeprovision *bool `json:"waitForReservationDeprovision,omitempty" tf:"wait_for_reservation_deprovision,omitempty"`
}

type DeviceObservation struct {

	// (String) The ipv4 private IP assigned to the device
	// The ipv4 private IP assigned to the device
	AccessPrivateIPv4 *string `json:"accessPrivateIpv4,omitempty" tf:"access_private_ipv4,omitempty"`

	// (String) The ipv4 maintenance IP assigned to the device
	// The ipv4 maintenance IP assigned to the device
	AccessPublicIPv4 *string `json:"accessPublicIpv4,omitempty" tf:"access_public_ipv4,omitempty"`

	// (String) The ipv6 maintenance IP assigned to the device
	// The ipv6 maintenance IP assigned to the device
	AccessPublicIPv6 *string `json:"accessPublicIpv6,omitempty" tf:"access_public_ipv6,omitempty"`

	// (Boolean) If true, a device with OS custom_ipxe will
	// If true, a device with OS custom_ipxe will
	AlwaysPxe *bool `json:"alwaysPxe,omitempty" tf:"always_pxe,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Behavior []BehaviorObservation `json:"behavior,omitempty" tf:"behavior,omitempty"`

	// (String) monthly or hourly
	// monthly or hourly
	BillingCycle *string `json:"billingCycle,omitempty" tf:"billing_cycle,omitempty"`

	// (String) The timestamp for when the device was created
	// The timestamp for when the device was created
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// (String, Deprecated) The facility where the device is deployed
	// The facility where the device is deployed
	DeployedFacility *string `json:"deployedFacility,omitempty" tf:"deployed_facility,omitempty"`

	// available hardware reservation
	// ID of hardware reservation where this device was deployed. It is useful when using the next-available hardware reservation
	DeployedHardwareReservationID *string `json:"deployedHardwareReservationId,omitempty" tf:"deployed_hardware_reservation_id,omitempty"`

	// (String) Description string for the device
	// Description string for the device
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (List of String, Deprecated) List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit Facilities API docs, set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	// List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	Facilities []*string `json:"facilities,omitempty" tf:"facilities,omitempty"`

	// (Boolean) Delete device even if it has volumes attached. Only applies for destroy action
	// Delete device even if it has volumes attached. Only applies for destroy action
	ForceDetachVolumes *bool `json:"forceDetachVolumes,omitempty" tf:"force_detach_volumes,omitempty"`

	// available if you want to pick your next available reservation automatically
	// The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your next available reservation automatically
	HardwareReservationID *string `json:"hardwareReservationId,omitempty" tf:"hardware_reservation_id,omitempty"`

	// (String) The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	// The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List) A list of IP address types for the device (structure is documented below) (see below for nested schema)
	// A list of IP address types for the device (structure is documented below)
	IPAddress []IPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) URL pointing to a hosted iPXE script. More
	// URL pointing to a hosted iPXE script. More
	IpxeScriptURL *string `json:"ipxeScriptUrl,omitempty" tf:"ipxe_script_url,omitempty"`

	// (Boolean) Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached
	// Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// (String) Metro area for the new device. Conflicts with facilities
	// Metro area for the new device. Conflicts with facilities
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// (List of Object) The device's private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 addresses: public ipv4, private ipv4 and ipv6 (see below for nested schema)
	// The device's private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 addresses: public ipv4, private ipv4 and ipv6
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// bonded, layer2-individual, layer2-bonded
	// Network type of a device, used in [Layer 2 networking](https://metal.equinix.com/developers/docs/networking/layer2/). Will be one of layer3, hybrid, hybrid-bonded, layer2-individual, layer2-bonded
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// place instead of recreated.
	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your API auth token in the top of the page and see JSON from the API response.  By default, changing this attribute will cause your device to be deleted and recreated.  If `reinstall` is enabled, the device will be updated in-place instead of recreated.
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// metal server and plan documentation
	// The device plan slug. To find the plan slug, visit the [bare-metal server](https://deploy.equinix.com/product/bare-metal/servers/) and [plan documentation](https://deploy.equinix.com/developers/docs/metal/hardware/standard-servers/)
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (List of Object) Ports assigned to the device (see below for nested schema)
	// Ports assigned to the device
	Ports []DevicePortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`

	// (String) The ID of the project in which to create the device
	// The ID of the project in which to create the device
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (List of String) Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the equinix_metal_project_ssh_key resource
	// Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the [equinix_metal_project_ssh_key](equinix_metal_project_ssh_key.md) resource
	ProjectSSHKeyIds []*string `json:"projectSshKeyIds,omitempty" tf:"project_ssh_key_ids,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Reinstall []ReinstallObservation `json:"reinstall,omitempty" tf:"reinstall,omitempty"`

	// (List of String) List of IDs of SSH keys deployed in the device, can be both user and project SSH keys
	// List of IDs of SSH keys deployed in the device, can be both user and project SSH keys
	SSHKeyIds []*string `json:"sshKeyIds,omitempty" tf:"ssh_key_ids,omitempty"`

	// (String) The hostname to use for Serial over SSH access to the device
	// The hostname to use for [Serial over SSH](https://deploy.equinix.com/developers/docs/metal/resilience-recovery/serial-over-ssh/) access to the device
	SosHostname *string `json:"sosHostname,omitempty" tf:"sos_hostname,omitempty"`

	// (String) The status of the device
	// The status of the device
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) JSON for custom partitioning. Only usable on reserved hardware. More information in in the Custom Partitioning and RAID doc
	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/) doc
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// (List of String) Tags attached to the device
	// Tags attached to the device
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// 09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	// Timestamp for device termination. For example "2021-09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	TerminationTime *string `json:"terminationTime,omitempty" tf:"termination_time,omitempty"`

	// (String) The timestamp for the last time the device was updated
	// The timestamp for the last time the device was updated
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`

	// (List of String) Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the equinix_metal_ssh_key resource
	// Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the [equinix_metal_ssh_key](equinix_metal_ssh_key.md) resource
	UserSSHKeyIds []*string `json:"userSshKeyIds,omitempty" tf:"user_ssh_key_ids,omitempty"`

	// (Boolean) Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	// Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	WaitForReservationDeprovision *bool `json:"waitForReservationDeprovision,omitempty" tf:"wait_for_reservation_deprovision,omitempty"`
}

type DeviceParameters struct {

	// (Boolean) If true, a device with OS custom_ipxe will
	// If true, a device with OS custom_ipxe will
	// +kubebuilder:validation:Optional
	AlwaysPxe *bool `json:"alwaysPxe,omitempty" tf:"always_pxe,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Behavior []BehaviorParameters `json:"behavior,omitempty" tf:"behavior,omitempty"`

	// (String) monthly or hourly
	// monthly or hourly
	// +kubebuilder:validation:Optional
	BillingCycle *string `json:"billingCycle,omitempty" tf:"billing_cycle,omitempty"`

	// place instead of recreated.
	// A string of the desired Custom Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `"custom_data"`, the device will be updated in-place instead of recreated.
	// +kubebuilder:validation:Optional
	CustomDataSecretRef *v1.SecretKeySelector `json:"customDataSecretRef,omitempty" tf:"-"`

	// (String) Description string for the device
	// Description string for the device
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (List of String, Deprecated) List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit Facilities API docs, set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	// List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	// +kubebuilder:validation:Optional
	Facilities []*string `json:"facilities,omitempty" tf:"facilities,omitempty"`

	// (Boolean) Delete device even if it has volumes attached. Only applies for destroy action
	// Delete device even if it has volumes attached. Only applies for destroy action
	// +kubebuilder:validation:Optional
	ForceDetachVolumes *bool `json:"forceDetachVolumes,omitempty" tf:"force_detach_volumes,omitempty"`

	// available if you want to pick your next available reservation automatically
	// The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your next available reservation automatically
	// +kubebuilder:validation:Optional
	HardwareReservationID *string `json:"hardwareReservationId,omitempty" tf:"hardware_reservation_id,omitempty"`

	// (String) The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	// The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (Block List) A list of IP address types for the device (structure is documented below) (see below for nested schema)
	// A list of IP address types for the device (structure is documented below)
	// +kubebuilder:validation:Optional
	IPAddress []IPAddressParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (String) URL pointing to a hosted iPXE script. More
	// URL pointing to a hosted iPXE script. More
	// +kubebuilder:validation:Optional
	IpxeScriptURL *string `json:"ipxeScriptUrl,omitempty" tf:"ipxe_script_url,omitempty"`

	// (Boolean) Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached
	// Whether the device is locked or unlocked. Locking a device prevents you from deleting or reinstalling the device or performing a firmware update on the device, and it prevents an instance with a termination time set from being reclaimed, even if the termination time was reached
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// (String) Metro area for the new device. Conflicts with facilities
	// Metro area for the new device. Conflicts with facilities
	// +kubebuilder:validation:Optional
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// place instead of recreated.
	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your API auth token in the top of the page and see JSON from the API response.  By default, changing this attribute will cause your device to be deleted and recreated.  If `reinstall` is enabled, the device will be updated in-place instead of recreated.
	// +kubebuilder:validation:Optional
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// metal server and plan documentation
	// The device plan slug. To find the plan slug, visit the [bare-metal server](https://deploy.equinix.com/product/bare-metal/servers/) and [plan documentation](https://deploy.equinix.com/developers/docs/metal/hardware/standard-servers/)
	// +kubebuilder:validation:Optional
	Plan *string `json:"plan,omitempty" tf:"plan,omitempty"`

	// (String) The ID of the project in which to create the device
	// The ID of the project in which to create the device
	// +crossplane:generate:reference:type=Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (List of String) Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the equinix_metal_project_ssh_key resource
	// Array of IDs of the project SSH keys which should be added to the device. If you specify this array, only the listed project SSH keys (and any SSH keys for the users specified in user_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included.  Project SSH keys can be created with the [equinix_metal_project_ssh_key](equinix_metal_project_ssh_key.md) resource
	// +kubebuilder:validation:Optional
	ProjectSSHKeyIds []*string `json:"projectSshKeyIds,omitempty" tf:"project_ssh_key_ids,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Reinstall []ReinstallParameters `json:"reinstall,omitempty" tf:"reinstall,omitempty"`

	// (String) JSON for custom partitioning. Only usable on reserved hardware. More information in in the Custom Partitioning and RAID doc
	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/) doc
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// (List of String) Tags attached to the device
	// Tags attached to the device
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// 09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	// Timestamp for device termination. For example "2021-09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	// +kubebuilder:validation:Optional
	TerminationTime *string `json:"terminationTime,omitempty" tf:"termination_time,omitempty"`

	// place instead of recreated.
	// A string of the desired User Data for the device.  By default, changing this attribute will cause the provider to destroy and recreate your device.  If `reinstall` is specified or `behavior.allow_changes` includes `"user_data"`, the device will be updated in-place instead of recreated.
	// +kubebuilder:validation:Optional
	UserDataSecretRef *v1.SecretKeySelector `json:"userDataSecretRef,omitempty" tf:"-"`

	// (List of String) Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the equinix_metal_ssh_key resource
	// Array of IDs of the users whose SSH keys should be added to the device. If you specify this array, only the listed users' SSH keys (and any project SSH keys specified in project_ssh_key_ids) will be added. If no SSH keys are specified (both user_ssh_keys_ids and project_ssh_key_ids are empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. User SSH keys can be created with the [equinix_metal_ssh_key](equinix_metal_ssh_key.md) resource
	// +kubebuilder:validation:Optional
	UserSSHKeyIds []*string `json:"userSshKeyIds,omitempty" tf:"user_ssh_key_ids,omitempty"`

	// (Boolean) Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	// Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	// +kubebuilder:validation:Optional
	WaitForReservationDeprovision *bool `json:"waitForReservationDeprovision,omitempty" tf:"wait_for_reservation_deprovision,omitempty"`
}

type DevicePortsInitParameters struct {
}

type DevicePortsObservation struct {

	// (Boolean)
	Bonded *bool `json:"bonded,omitempty" tf:"bonded,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) one of public_ipv4,private_ipv4,public_ipv6
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DevicePortsParameters struct {
}

type IPAddressInitParameters struct {

	// (Number) CIDR suffix for IP block assigned to this device
	// CIDR suffix for IP block assigned to this device
	Cidr *float64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (List of String) IDs of reservations to pick the blocks from
	// IDs of reservations to pick the blocks from
	ReservationIds []*string `json:"reservationIds,omitempty" tf:"reservation_ids,omitempty"`

	// (String) one of public_ipv4,private_ipv4,public_ipv6
	// one of public_ipv4,private_ipv4,public_ipv6
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPAddressObservation struct {

	// (Number) CIDR suffix for IP block assigned to this device
	// CIDR suffix for IP block assigned to this device
	Cidr *float64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (List of String) IDs of reservations to pick the blocks from
	// IDs of reservations to pick the blocks from
	ReservationIds []*string `json:"reservationIds,omitempty" tf:"reservation_ids,omitempty"`

	// (String) one of public_ipv4,private_ipv4,public_ipv6
	// one of public_ipv4,private_ipv4,public_ipv6
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPAddressParameters struct {

	// (Number) CIDR suffix for IP block assigned to this device
	// CIDR suffix for IP block assigned to this device
	// +kubebuilder:validation:Optional
	Cidr *float64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (List of String) IDs of reservations to pick the blocks from
	// IDs of reservations to pick the blocks from
	// +kubebuilder:validation:Optional
	ReservationIds []*string `json:"reservationIds,omitempty" tf:"reservation_ids,omitempty"`

	// (String) one of public_ipv4,private_ipv4,public_ipv6
	// one of public_ipv4,private_ipv4,public_ipv6
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NetworkInitParameters struct {
}

type NetworkObservation struct {

	// (String)
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// (Number) CIDR suffix for IP block assigned to this device
	Cidr *float64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// (Number)
	Family *float64 `json:"family,omitempty" tf:"family,omitempty"`

	// (String)
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// (Boolean)
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type NetworkParameters struct {
}

type ReinstallInitParameters struct {

	// (Boolean) Whether the OS disk should be filled with 00h bytes before reinstall
	// Whether the OS disk should be filled with `00h` bytes before reinstall
	DeprovisionFast *bool `json:"deprovisionFast,omitempty" tf:"deprovision_fast,omitempty"`

	// (Boolean) Whether the device should be reinstalled instead of destroyed
	// Whether the device should be reinstalled instead of destroyed
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// OS disks should be kept or wiped during reinstall
	// Whether the non-OS disks should be kept or wiped during reinstall
	PreserveData *bool `json:"preserveData,omitempty" tf:"preserve_data,omitempty"`
}

type ReinstallObservation struct {

	// (Boolean) Whether the OS disk should be filled with 00h bytes before reinstall
	// Whether the OS disk should be filled with `00h` bytes before reinstall
	DeprovisionFast *bool `json:"deprovisionFast,omitempty" tf:"deprovision_fast,omitempty"`

	// (Boolean) Whether the device should be reinstalled instead of destroyed
	// Whether the device should be reinstalled instead of destroyed
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// OS disks should be kept or wiped during reinstall
	// Whether the non-OS disks should be kept or wiped during reinstall
	PreserveData *bool `json:"preserveData,omitempty" tf:"preserve_data,omitempty"`
}

type ReinstallParameters struct {

	// (Boolean) Whether the OS disk should be filled with 00h bytes before reinstall
	// Whether the OS disk should be filled with `00h` bytes before reinstall
	// +kubebuilder:validation:Optional
	DeprovisionFast *bool `json:"deprovisionFast,omitempty" tf:"deprovision_fast,omitempty"`

	// (Boolean) Whether the device should be reinstalled instead of destroyed
	// Whether the device should be reinstalled instead of destroyed
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// OS disks should be kept or wiped during reinstall
	// Whether the non-OS disks should be kept or wiped during reinstall
	// +kubebuilder:validation:Optional
	PreserveData *bool `json:"preserveData,omitempty" tf:"preserve_data,omitempty"`
}

// DeviceSpec defines the desired state of Device
type DeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeviceInitParameters `json:"initProvider,omitempty"`
}

// DeviceStatus defines the observed state of Device.
type DeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Device is the Schema for the Devices API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type Device struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operatingSystem) || (has(self.initProvider) && has(self.initProvider.operatingSystem))",message="spec.forProvider.operatingSystem is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.plan) || (has(self.initProvider) && has(self.initProvider.plan))",message="spec.forProvider.plan is a required parameter"
	Spec   DeviceSpec   `json:"spec"`
	Status DeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceList contains a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Device `json:"items"`
}

// Repository type metadata.
var (
	Device_Kind             = "Device"
	Device_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Device_Kind}.String()
	Device_KindAPIVersion   = Device_Kind + "." + CRDGroupVersion.String()
	Device_GroupVersionKind = CRDGroupVersion.WithKind(Device_Kind)
)

func init() {
	SchemeBuilder.Register(&Device{}, &DeviceList{})
}
