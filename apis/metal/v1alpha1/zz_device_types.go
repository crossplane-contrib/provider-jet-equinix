/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceObservation struct {
	AccessPrivateIPv4 *string `json:"accessPrivateIpv4,omitempty" tf:"access_private_ipv4,omitempty"`

	AccessPublicIPv4 *string `json:"accessPublicIpv4,omitempty" tf:"access_public_ipv4,omitempty"`

	AccessPublicIPv6 *string `json:"accessPublicIpv6,omitempty" tf:"access_public_ipv6,omitempty"`

	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	DeployedFacility *string `json:"deployedFacility,omitempty" tf:"deployed_facility,omitempty"`

	DeployedHardwareReservationID *string `json:"deployedHardwareReservationId,omitempty" tf:"deployed_hardware_reservation_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	Ports []DevicePortsObservation `json:"ports,omitempty" tf:"ports,omitempty"`

	SSHKeyIds []*string `json:"sshKeyIds,omitempty" tf:"ssh_key_ids,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type DeviceParameters struct {

	// If true, a device with OS custom_ipxe will
	// +kubebuilder:validation:Optional
	AlwaysPxe *bool `json:"alwaysPxe,omitempty" tf:"always_pxe,omitempty"`

	// monthly or hourly
	// +kubebuilder:validation:Optional
	BillingCycle *string `json:"billingCycle,omitempty" tf:"billing_cycle,omitempty"`

	// A string of the desired Custom Data for the device
	// +kubebuilder:validation:Optional
	CustomDataSecretRef *v1.SecretKeySelector `json:"customDataSecretRef,omitempty" tf:"-"`

	// Description string for the device
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of facility codes with deployment preferences. Equinix Metal API will go through the list and will deploy your device to first facility with free capacity. List items must be facility codes or any (a wildcard). To find the facility code, visit [Facilities API docs](https://metal.equinix.com/developers/api/facilities/), set your API auth token in the top of the page and see JSON from the API response. Conflicts with metro
	// +kubebuilder:validation:Optional
	Facilities []*string `json:"facilities,omitempty" tf:"facilities,omitempty"`

	// Delete device even if it has volumes attached. Only applies for destroy action
	// +kubebuilder:validation:Optional
	ForceDetachVolumes *bool `json:"forceDetachVolumes,omitempty" tf:"force_detach_volumes,omitempty"`

	// The UUID of the hardware reservation where you want this device deployed, or next-available if you want to pick your next available reservation automatically
	// +kubebuilder:validation:Optional
	HardwareReservationID *string `json:"hardwareReservationId,omitempty" tf:"hardware_reservation_id,omitempty"`

	// The device hostname used in deployments taking advantage of Layer3 DHCP or metadata service configuration.
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// A list of IP address types for the device (structure is documented below)
	// +kubebuilder:validation:Optional
	IPAddress []IPAddressParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// URL pointing to a hosted iPXE script. More
	// +kubebuilder:validation:Optional
	IpxeScriptURL *string `json:"ipxeScriptUrl,omitempty" tf:"ipxe_script_url,omitempty"`

	// Metro area for the new device. Conflicts with facilities
	// +kubebuilder:validation:Optional
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// The operating system slug. To find the slug, or visit [Operating Systems API docs](https://metal.equinix.com/developers/api/operatingsystems), set your API auth token in the top of the page and see JSON from the API response
	// +kubebuilder:validation:Required
	OperatingSystem *string `json:"operatingSystem" tf:"operating_system,omitempty"`

	// The device plan slug. To find the plan slug, visit [Device plans API docs](https://metal.equinix.com/developers/api/plans), set your auth token in the top of the page and see JSON from the API response
	// +kubebuilder:validation:Required
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// The ID of the project in which to create the device
	// +crossplane:generate:reference:type=Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Array of IDs of the project SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed project SSH keys (and any user_ssh_key_ids) will be added. Project SSH keys can be created with the [equinix_metal_project_ssh_key](equinix_metal_project_ssh_key.md) resource
	// +kubebuilder:validation:Optional
	ProjectSSHKeyIds []*string `json:"projectSshKeyIds,omitempty" tf:"project_ssh_key_ids,omitempty"`

	// +kubebuilder:validation:Optional
	Reinstall []ReinstallParameters `json:"reinstall,omitempty" tf:"reinstall,omitempty"`

	// JSON for custom partitioning. Only usable on reserved hardware. More information in in the [Custom Partitioning and RAID](https://metal.equinix.com/developers/docs/servers/custom-partitioning-raid/) doc
	// +kubebuilder:validation:Optional
	Storage *string `json:"storage,omitempty" tf:"storage,omitempty"`

	// Tags attached to the device
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Timestamp for device termination. For example "2021-09-03T16:32:00+03:00". If you don't supply timezone info, timestamp is assumed to be in UTC.
	// +kubebuilder:validation:Optional
	TerminationTime *string `json:"terminationTime,omitempty" tf:"termination_time,omitempty"`

	// A string of the desired User Data for the device
	// +kubebuilder:validation:Optional
	UserDataSecretRef *v1.SecretKeySelector `json:"userDataSecretRef,omitempty" tf:"-"`

	// Array of IDs of the user SSH keys which should be added to the device. If you omit this, SSH keys of all the members of the parent project will be added to the device. If you specify this array, only the listed user SSH keys (and any project_ssh_key_ids) will be added. User SSH keys can be created with the [equinix_metal_ssh_key](equinix_metal_ssh_key.md) resource
	// +kubebuilder:validation:Optional
	UserSSHKeyIds []*string `json:"userSshKeyIds,omitempty" tf:"user_ssh_key_ids,omitempty"`

	// Only used for devices in reserved hardware. If set, the deletion of this device will block until the hardware reservation is marked provisionable (about 4 minutes in August 2019)
	// +kubebuilder:validation:Optional
	WaitForReservationDeprovision *bool `json:"waitForReservationDeprovision,omitempty" tf:"wait_for_reservation_deprovision,omitempty"`
}

type DevicePortsObservation struct {
	Bonded *bool `json:"bonded,omitempty" tf:"bonded,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DevicePortsParameters struct {
}

type IPAddressObservation struct {
}

type IPAddressParameters struct {

	// CIDR suffix for IP block assigned to this device
	// +kubebuilder:validation:Optional
	Cidr *float64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// IDs of reservations to pick the blocks from
	// +kubebuilder:validation:Optional
	ReservationIds []*string `json:"reservationIds,omitempty" tf:"reservation_ids,omitempty"`

	// one of public_ipv4,private_ipv4,public_ipv6
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type NetworkObservation struct {
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	Cidr *float64 `json:"cidr,omitempty" tf:"cidr,omitempty"`

	Family *float64 `json:"family,omitempty" tf:"family,omitempty"`

	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	Public *bool `json:"public,omitempty" tf:"public,omitempty"`
}

type NetworkParameters struct {
}

type ReinstallObservation struct {
}

type ReinstallParameters struct {

	// Whether the OS disk should be filled with `00h` bytes before reinstall
	// +kubebuilder:validation:Optional
	DeprovisionFast *bool `json:"deprovisionFast,omitempty" tf:"deprovision_fast,omitempty"`

	// Whether the device should be reinstalled instead of destroyed
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether the non-OS disks should be kept or wiped during reinstall
	// +kubebuilder:validation:Optional
	PreserveData *bool `json:"preserveData,omitempty" tf:"preserve_data,omitempty"`
}

// DeviceSpec defines the desired state of Device
type DeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceParameters `json:"forProvider"`
}

// DeviceStatus defines the observed state of Device.
type DeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Device is the Schema for the Devices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixjet}
type Device struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceSpec   `json:"spec"`
	Status            DeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceList contains a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Device `json:"items"`
}

// Repository type metadata.
var (
	Device_Kind             = "Device"
	Device_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Device_Kind}.String()
	Device_KindAPIVersion   = Device_Kind + "." + CRDGroupVersion.String()
	Device_GroupVersionKind = CRDGroupVersion.WithKind(Device_Kind)
)

func init() {
	SchemeBuilder.Register(&Device{}, &DeviceList{})
}
