/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceNetworkTypeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DeviceNetworkTypeParameters struct {

	// The ID of the device on which the network type should be set
	// +crossplane:generate:reference:type=Device
	// +kubebuilder:validation:Optional
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceIDRef *v1.Reference `json:"deviceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DeviceIDSelector *v1.Selector `json:"deviceIdSelector,omitempty" tf:"-"`

	// Network type to set. Must be one of layer3, hybrid, hybrid-bonded, layer2-individual, layer2-bonded
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// DeviceNetworkTypeSpec defines the desired state of DeviceNetworkType
type DeviceNetworkTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceNetworkTypeParameters `json:"forProvider"`
}

// DeviceNetworkTypeStatus defines the observed state of DeviceNetworkType.
type DeviceNetworkTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceNetworkTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceNetworkType is the Schema for the DeviceNetworkTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinixjet}
type DeviceNetworkType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceNetworkTypeSpec   `json:"spec"`
	Status            DeviceNetworkTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceNetworkTypeList contains a list of DeviceNetworkTypes
type DeviceNetworkTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceNetworkType `json:"items"`
}

// Repository type metadata.
var (
	DeviceNetworkType_Kind             = "DeviceNetworkType"
	DeviceNetworkType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceNetworkType_Kind}.String()
	DeviceNetworkType_KindAPIVersion   = DeviceNetworkType_Kind + "." + CRDGroupVersion.String()
	DeviceNetworkType_GroupVersionKind = CRDGroupVersion.WithKind(DeviceNetworkType_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceNetworkType{}, &DeviceNetworkTypeList{})
}
