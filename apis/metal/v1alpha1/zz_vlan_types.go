/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VlanInitParameters struct {

	// Description string.
	// Description string
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated) Facility where to create the VLAN. Use metro instead; read the facility to metro migration guide
	// Facility where to create the VLAN
	Facility *string `json:"facility,omitempty" tf:"facility,omitempty"`

	// Metro in which to create the VLAN
	// Metro in which to create the VLAN
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// ID of parent project.
	// ID of parent project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// VLAN ID, must be unique in metro.
	// VLAN ID, must be unique in metro
	Vxlan *float64 `json:"vxlan,omitempty" tf:"vxlan,omitempty"`
}

type VlanObservation struct {

	// Description string.
	// Description string
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated) Facility where to create the VLAN. Use metro instead; read the facility to metro migration guide
	// Facility where to create the VLAN
	Facility *string `json:"facility,omitempty" tf:"facility,omitempty"`

	// ID of the virtual network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Metro in which to create the VLAN
	// Metro in which to create the VLAN
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// ID of parent project.
	// ID of parent project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// VLAN ID, must be unique in metro.
	// VLAN ID, must be unique in metro
	Vxlan *float64 `json:"vxlan,omitempty" tf:"vxlan,omitempty"`
}

type VlanParameters struct {

	// Description string.
	// Description string
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Deprecated) Facility where to create the VLAN. Use metro instead; read the facility to metro migration guide
	// Facility where to create the VLAN
	// +kubebuilder:validation:Optional
	Facility *string `json:"facility,omitempty" tf:"facility,omitempty"`

	// Metro in which to create the VLAN
	// Metro in which to create the VLAN
	// +kubebuilder:validation:Optional
	Metro *string `json:"metro,omitempty" tf:"metro,omitempty"`

	// ID of parent project.
	// ID of parent project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// VLAN ID, must be unique in metro.
	// VLAN ID, must be unique in metro
	// +kubebuilder:validation:Optional
	Vxlan *float64 `json:"vxlan,omitempty" tf:"vxlan,omitempty"`
}

// VlanSpec defines the desired state of Vlan
type VlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VlanParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VlanInitParameters `json:"initProvider,omitempty"`
}

// VlanStatus defines the observed state of Vlan.
type VlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Vlan is the Schema for the Vlans API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,equinix}
type Vlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   VlanSpec   `json:"spec"`
	Status VlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VlanList contains a list of Vlans
type VlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vlan `json:"items"`
}

// Repository type metadata.
var (
	Vlan_Kind             = "Vlan"
	Vlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vlan_Kind}.String()
	Vlan_KindAPIVersion   = Vlan_Kind + "." + CRDGroupVersion.String()
	Vlan_GroupVersionKind = CRDGroupVersion.WithKind(Vlan_Kind)
)

func init() {
	SchemeBuilder.Register(&Vlan{}, &VlanList{})
}
